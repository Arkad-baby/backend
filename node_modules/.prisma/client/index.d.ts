
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = {
  id: string
  name: string
  email: string
  dateOfBirth: string
  gender: string
}

/**
 * Model document
 * 
 */
export type document = {
  id: string
  name: string
  description: string | null
  userId: string
  active: boolean
}

/**
 * Model pages
 * 
 */
export type pages = {
  id: string
  documentId: string
  pageNumber: number
  title: string | null
  content: string
  active: boolean
}

/**
 * Model revision
 * 
 */
export type revision = {
  id: string
  pageId: string
  title: string | null
  content: string
  userId: string
  published: boolean
}

/**
 * Model comment
 * 
 */
export type comment = {
  id: string
  text: string
  userId: string
  documentId: string | null
  pageId: string | null
  revisionId: string | null
}

/**
 * Model image
 * 
 */
export type image = {
  id: string
  pageId: string | null
  revisionId: string | null
  type: string | null
  size: string | null
  image: string
  dimension: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.documentDelegate<GlobalReject>;

  /**
   * `prisma.pages`: Exposes CRUD operations for the **pages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pages
    * const pages = await prisma.pages.findMany()
    * ```
    */
  get pages(): Prisma.pagesDelegate<GlobalReject>;

  /**
   * `prisma.revision`: Exposes CRUD operations for the **revision** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Revisions
    * const revisions = await prisma.revision.findMany()
    * ```
    */
  get revision(): Prisma.revisionDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.commentDelegate<GlobalReject>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.imageDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    document: 'document',
    pages: 'pages',
    revision: 'revision',
    comment: 'comment',
    image: 'image'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    document: number
    comment: number
    revision: number
  }

  export type UserCountOutputTypeSelect = {
    document?: boolean
    comment?: boolean
    revision?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type DocumentCountOutputType
   */


  export type DocumentCountOutputType = {
    pages: number
    comment: number
  }

  export type DocumentCountOutputTypeSelect = {
    pages?: boolean
    comment?: boolean
  }

  export type DocumentCountOutputTypeGetPayload<S extends boolean | null | undefined | DocumentCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DocumentCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DocumentCountOutputTypeArgs)
    ? DocumentCountOutputType 
    : S extends { select: any } & (DocumentCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DocumentCountOutputType ? DocumentCountOutputType[P] : never
  } 
      : DocumentCountOutputType




  // Custom InputTypes

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DocumentCountOutputType
     */
    select?: DocumentCountOutputTypeSelect | null
  }



  /**
   * Count Type PagesCountOutputType
   */


  export type PagesCountOutputType = {
    image: number
    revision: number
    comment: number
  }

  export type PagesCountOutputTypeSelect = {
    image?: boolean
    revision?: boolean
    comment?: boolean
  }

  export type PagesCountOutputTypeGetPayload<S extends boolean | null | undefined | PagesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PagesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PagesCountOutputTypeArgs)
    ? PagesCountOutputType 
    : S extends { select: any } & (PagesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PagesCountOutputType ? PagesCountOutputType[P] : never
  } 
      : PagesCountOutputType




  // Custom InputTypes

  /**
   * PagesCountOutputType without action
   */
  export type PagesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PagesCountOutputType
     */
    select?: PagesCountOutputTypeSelect | null
  }



  /**
   * Count Type RevisionCountOutputType
   */


  export type RevisionCountOutputType = {
    comment: number
    image: number
  }

  export type RevisionCountOutputTypeSelect = {
    comment?: boolean
    image?: boolean
  }

  export type RevisionCountOutputTypeGetPayload<S extends boolean | null | undefined | RevisionCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RevisionCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RevisionCountOutputTypeArgs)
    ? RevisionCountOutputType 
    : S extends { select: any } & (RevisionCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RevisionCountOutputType ? RevisionCountOutputType[P] : never
  } 
      : RevisionCountOutputType




  // Custom InputTypes

  /**
   * RevisionCountOutputType without action
   */
  export type RevisionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RevisionCountOutputType
     */
    select?: RevisionCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    dateOfBirth: string | null
    gender: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    dateOfBirth: string | null
    gender: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    dateOfBirth: number
    gender: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    dateOfBirth?: true
    gender?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    dateOfBirth?: true
    gender?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    dateOfBirth?: true
    gender?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    dateOfBirth: string
    gender: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    document?: boolean | user$documentArgs
    comment?: boolean | user$commentArgs
    revision?: boolean | user$revisionArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type userInclude = {
    document?: boolean | user$documentArgs
    comment?: boolean | user$commentArgs
    revision?: boolean | user$revisionArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<S extends boolean | null | undefined | userArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? user :
    S extends undefined ? never :
    S extends { include: any } & (userArgs | userFindManyArgs)
    ? user  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'document' ? Array < documentGetPayload<S['include'][P]>>  :
        P extends 'comment' ? Array < commentGetPayload<S['include'][P]>>  :
        P extends 'revision' ? Array < revisionGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (userArgs | userFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'document' ? Array < documentGetPayload<S['select'][P]>>  :
        P extends 'comment' ? Array < commentGetPayload<S['select'][P]>>  :
        P extends 'revision' ? Array < revisionGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof user ? user[P] : never
  } 
      : user


  type userCountArgs = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? Prisma__userClient<userGetPayload<T>> : Prisma__userClient<userGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): Prisma.PrismaPromise<Array<userGetPayload<T>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): Prisma__userClient<userGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    document<T extends user$documentArgs= {}>(args?: Subset<T, user$documentArgs>): Prisma.PrismaPromise<Array<documentGetPayload<T>>| Null>;

    comment<T extends user$commentArgs= {}>(args?: Subset<T, user$commentArgs>): Prisma.PrismaPromise<Array<commentGetPayload<T>>| Null>;

    revision<T extends user$revisionArgs= {}>(args?: Subset<T, user$revisionArgs>): Prisma.PrismaPromise<Array<revisionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user base type for findUnique actions
   */
  export type userFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUnique
   */
  export interface userFindUniqueArgs extends userFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user base type for findFirst actions
   */
  export type userFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * user findFirst
   */
  export interface userFindFirstArgs extends userFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.document
   */
  export type user$documentArgs = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    where?: documentWhereInput
    orderBy?: Enumerable<documentOrderByWithRelationInput>
    cursor?: documentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DocumentScalarFieldEnum>
  }


  /**
   * user.comment
   */
  export type user$commentArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    where?: commentWhereInput
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * user.revision
   */
  export type user$revisionArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    where?: revisionWhereInput
    orderBy?: Enumerable<revisionOrderByWithRelationInput>
    cursor?: revisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RevisionScalarFieldEnum>
  }


  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude | null
  }



  /**
   * Model document
   */


  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    active: boolean | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    active: boolean | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    userId: number
    active: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    active?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    active?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    active?: true
    _all?: true
  }

  export type DocumentAggregateArgs = {
    /**
     * Filter which document to aggregate.
     */
    where?: documentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     */
    orderBy?: Enumerable<documentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: documentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs = {
    where?: documentWhereInput
    orderBy?: Enumerable<documentOrderByWithAggregationInput>
    by: DocumentScalarFieldEnum[]
    having?: documentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }


  export type DocumentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    userId: string
    active: boolean
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type documentSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    active?: boolean
    user?: boolean | userArgs
    pages?: boolean | document$pagesArgs
    comment?: boolean | document$commentArgs
    _count?: boolean | DocumentCountOutputTypeArgs
  }


  export type documentInclude = {
    user?: boolean | userArgs
    pages?: boolean | document$pagesArgs
    comment?: boolean | document$commentArgs
    _count?: boolean | DocumentCountOutputTypeArgs
  }

  export type documentGetPayload<S extends boolean | null | undefined | documentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? document :
    S extends undefined ? never :
    S extends { include: any } & (documentArgs | documentFindManyArgs)
    ? document  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? userGetPayload<S['include'][P]> :
        P extends 'pages' ? Array < pagesGetPayload<S['include'][P]>>  :
        P extends 'comment' ? Array < commentGetPayload<S['include'][P]>>  :
        P extends '_count' ? DocumentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (documentArgs | documentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? userGetPayload<S['select'][P]> :
        P extends 'pages' ? Array < pagesGetPayload<S['select'][P]>>  :
        P extends 'comment' ? Array < commentGetPayload<S['select'][P]>>  :
        P extends '_count' ? DocumentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof document ? document[P] : never
  } 
      : document


  type documentCountArgs = 
    Omit<documentFindManyArgs, 'select' | 'include'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface documentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Document that matches the filter.
     * @param {documentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends documentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, documentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'document'> extends True ? Prisma__documentClient<documentGetPayload<T>> : Prisma__documentClient<documentGetPayload<T> | null, null>

    /**
     * Find one Document that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {documentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends documentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, documentFindUniqueOrThrowArgs>
    ): Prisma__documentClient<documentGetPayload<T>>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends documentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, documentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'document'> extends True ? Prisma__documentClient<documentGetPayload<T>> : Prisma__documentClient<documentGetPayload<T> | null, null>

    /**
     * Find the first Document that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends documentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, documentFindFirstOrThrowArgs>
    ): Prisma__documentClient<documentGetPayload<T>>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends documentFindManyArgs>(
      args?: SelectSubset<T, documentFindManyArgs>
    ): Prisma.PrismaPromise<Array<documentGetPayload<T>>>

    /**
     * Create a Document.
     * @param {documentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
    **/
    create<T extends documentCreateArgs>(
      args: SelectSubset<T, documentCreateArgs>
    ): Prisma__documentClient<documentGetPayload<T>>

    /**
     * Delete a Document.
     * @param {documentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
    **/
    delete<T extends documentDeleteArgs>(
      args: SelectSubset<T, documentDeleteArgs>
    ): Prisma__documentClient<documentGetPayload<T>>

    /**
     * Update one Document.
     * @param {documentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends documentUpdateArgs>(
      args: SelectSubset<T, documentUpdateArgs>
    ): Prisma__documentClient<documentGetPayload<T>>

    /**
     * Delete zero or more Documents.
     * @param {documentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends documentDeleteManyArgs>(
      args?: SelectSubset<T, documentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends documentUpdateManyArgs>(
      args: SelectSubset<T, documentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {documentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
    **/
    upsert<T extends documentUpsertArgs>(
      args: SelectSubset<T, documentUpsertArgs>
    ): Prisma__documentClient<documentGetPayload<T>>

    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {documentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends documentCountArgs>(
      args?: Subset<T, documentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__documentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends userArgs= {}>(args?: Subset<T, userArgs>): Prisma__userClient<userGetPayload<T> | Null>;

    pages<T extends document$pagesArgs= {}>(args?: Subset<T, document$pagesArgs>): Prisma.PrismaPromise<Array<pagesGetPayload<T>>| Null>;

    comment<T extends document$commentArgs= {}>(args?: Subset<T, document$commentArgs>): Prisma.PrismaPromise<Array<commentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * document base type for findUnique actions
   */
  export type documentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    /**
     * Filter, which document to fetch.
     */
    where: documentWhereUniqueInput
  }

  /**
   * document findUnique
   */
  export interface documentFindUniqueArgs extends documentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * document findUniqueOrThrow
   */
  export type documentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    /**
     * Filter, which document to fetch.
     */
    where: documentWhereUniqueInput
  }


  /**
   * document base type for findFirst actions
   */
  export type documentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    /**
     * Filter, which document to fetch.
     */
    where?: documentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     */
    orderBy?: Enumerable<documentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for documents.
     */
    cursor?: documentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of documents.
     */
    distinct?: Enumerable<DocumentScalarFieldEnum>
  }

  /**
   * document findFirst
   */
  export interface documentFindFirstArgs extends documentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * document findFirstOrThrow
   */
  export type documentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    /**
     * Filter, which document to fetch.
     */
    where?: documentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     */
    orderBy?: Enumerable<documentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for documents.
     */
    cursor?: documentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of documents.
     */
    distinct?: Enumerable<DocumentScalarFieldEnum>
  }


  /**
   * document findMany
   */
  export type documentFindManyArgs = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    /**
     * Filter, which documents to fetch.
     */
    where?: documentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of documents to fetch.
     */
    orderBy?: Enumerable<documentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing documents.
     */
    cursor?: documentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` documents.
     */
    skip?: number
    distinct?: Enumerable<DocumentScalarFieldEnum>
  }


  /**
   * document create
   */
  export type documentCreateArgs = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    /**
     * The data needed to create a document.
     */
    data: XOR<documentCreateInput, documentUncheckedCreateInput>
  }


  /**
   * document update
   */
  export type documentUpdateArgs = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    /**
     * The data needed to update a document.
     */
    data: XOR<documentUpdateInput, documentUncheckedUpdateInput>
    /**
     * Choose, which document to update.
     */
    where: documentWhereUniqueInput
  }


  /**
   * document updateMany
   */
  export type documentUpdateManyArgs = {
    /**
     * The data used to update documents.
     */
    data: XOR<documentUpdateManyMutationInput, documentUncheckedUpdateManyInput>
    /**
     * Filter which documents to update
     */
    where?: documentWhereInput
  }


  /**
   * document upsert
   */
  export type documentUpsertArgs = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    /**
     * The filter to search for the document to update in case it exists.
     */
    where: documentWhereUniqueInput
    /**
     * In case the document found by the `where` argument doesn't exist, create a new document with this data.
     */
    create: XOR<documentCreateInput, documentUncheckedCreateInput>
    /**
     * In case the document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<documentUpdateInput, documentUncheckedUpdateInput>
  }


  /**
   * document delete
   */
  export type documentDeleteArgs = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
    /**
     * Filter which document to delete.
     */
    where: documentWhereUniqueInput
  }


  /**
   * document deleteMany
   */
  export type documentDeleteManyArgs = {
    /**
     * Filter which documents to delete
     */
    where?: documentWhereInput
  }


  /**
   * document.pages
   */
  export type document$pagesArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    where?: pagesWhereInput
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    cursor?: pagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PagesScalarFieldEnum>
  }


  /**
   * document.comment
   */
  export type document$commentArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    where?: commentWhereInput
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * document without action
   */
  export type documentArgs = {
    /**
     * Select specific fields to fetch from the document
     */
    select?: documentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: documentInclude | null
  }



  /**
   * Model pages
   */


  export type AggregatePages = {
    _count: PagesCountAggregateOutputType | null
    _avg: PagesAvgAggregateOutputType | null
    _sum: PagesSumAggregateOutputType | null
    _min: PagesMinAggregateOutputType | null
    _max: PagesMaxAggregateOutputType | null
  }

  export type PagesAvgAggregateOutputType = {
    pageNumber: number | null
  }

  export type PagesSumAggregateOutputType = {
    pageNumber: number | null
  }

  export type PagesMinAggregateOutputType = {
    id: string | null
    documentId: string | null
    pageNumber: number | null
    title: string | null
    content: string | null
    active: boolean | null
  }

  export type PagesMaxAggregateOutputType = {
    id: string | null
    documentId: string | null
    pageNumber: number | null
    title: string | null
    content: string | null
    active: boolean | null
  }

  export type PagesCountAggregateOutputType = {
    id: number
    documentId: number
    pageNumber: number
    title: number
    content: number
    active: number
    _all: number
  }


  export type PagesAvgAggregateInputType = {
    pageNumber?: true
  }

  export type PagesSumAggregateInputType = {
    pageNumber?: true
  }

  export type PagesMinAggregateInputType = {
    id?: true
    documentId?: true
    pageNumber?: true
    title?: true
    content?: true
    active?: true
  }

  export type PagesMaxAggregateInputType = {
    id?: true
    documentId?: true
    pageNumber?: true
    title?: true
    content?: true
    active?: true
  }

  export type PagesCountAggregateInputType = {
    id?: true
    documentId?: true
    pageNumber?: true
    title?: true
    content?: true
    active?: true
    _all?: true
  }

  export type PagesAggregateArgs = {
    /**
     * Filter which pages to aggregate.
     */
    where?: pagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pages to fetch.
     */
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pages
    **/
    _count?: true | PagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagesMaxAggregateInputType
  }

  export type GetPagesAggregateType<T extends PagesAggregateArgs> = {
        [P in keyof T & keyof AggregatePages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePages[P]>
      : GetScalarType<T[P], AggregatePages[P]>
  }




  export type PagesGroupByArgs = {
    where?: pagesWhereInput
    orderBy?: Enumerable<pagesOrderByWithAggregationInput>
    by: PagesScalarFieldEnum[]
    having?: pagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagesCountAggregateInputType | true
    _avg?: PagesAvgAggregateInputType
    _sum?: PagesSumAggregateInputType
    _min?: PagesMinAggregateInputType
    _max?: PagesMaxAggregateInputType
  }


  export type PagesGroupByOutputType = {
    id: string
    documentId: string
    pageNumber: number
    title: string | null
    content: string
    active: boolean
    _count: PagesCountAggregateOutputType | null
    _avg: PagesAvgAggregateOutputType | null
    _sum: PagesSumAggregateOutputType | null
    _min: PagesMinAggregateOutputType | null
    _max: PagesMaxAggregateOutputType | null
  }

  type GetPagesGroupByPayload<T extends PagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagesGroupByOutputType[P]>
            : GetScalarType<T[P], PagesGroupByOutputType[P]>
        }
      >
    >


  export type pagesSelect = {
    id?: boolean
    documentId?: boolean
    pageNumber?: boolean
    title?: boolean
    content?: boolean
    active?: boolean
    document?: boolean | documentArgs
    image?: boolean | pages$imageArgs
    revision?: boolean | pages$revisionArgs
    comment?: boolean | pages$commentArgs
    _count?: boolean | PagesCountOutputTypeArgs
  }


  export type pagesInclude = {
    document?: boolean | documentArgs
    image?: boolean | pages$imageArgs
    revision?: boolean | pages$revisionArgs
    comment?: boolean | pages$commentArgs
    _count?: boolean | PagesCountOutputTypeArgs
  }

  export type pagesGetPayload<S extends boolean | null | undefined | pagesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? pages :
    S extends undefined ? never :
    S extends { include: any } & (pagesArgs | pagesFindManyArgs)
    ? pages  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'document' ? documentGetPayload<S['include'][P]> :
        P extends 'image' ? Array < imageGetPayload<S['include'][P]>>  :
        P extends 'revision' ? Array < revisionGetPayload<S['include'][P]>>  :
        P extends 'comment' ? Array < commentGetPayload<S['include'][P]>>  :
        P extends '_count' ? PagesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (pagesArgs | pagesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'document' ? documentGetPayload<S['select'][P]> :
        P extends 'image' ? Array < imageGetPayload<S['select'][P]>>  :
        P extends 'revision' ? Array < revisionGetPayload<S['select'][P]>>  :
        P extends 'comment' ? Array < commentGetPayload<S['select'][P]>>  :
        P extends '_count' ? PagesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof pages ? pages[P] : never
  } 
      : pages


  type pagesCountArgs = 
    Omit<pagesFindManyArgs, 'select' | 'include'> & {
      select?: PagesCountAggregateInputType | true
    }

  export interface pagesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Pages that matches the filter.
     * @param {pagesFindUniqueArgs} args - Arguments to find a Pages
     * @example
     * // Get one Pages
     * const pages = await prisma.pages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, pagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pages'> extends True ? Prisma__pagesClient<pagesGetPayload<T>> : Prisma__pagesClient<pagesGetPayload<T> | null, null>

    /**
     * Find one Pages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {pagesFindUniqueOrThrowArgs} args - Arguments to find a Pages
     * @example
     * // Get one Pages
     * const pages = await prisma.pages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends pagesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, pagesFindUniqueOrThrowArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Find the first Pages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesFindFirstArgs} args - Arguments to find a Pages
     * @example
     * // Get one Pages
     * const pages = await prisma.pages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, pagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pages'> extends True ? Prisma__pagesClient<pagesGetPayload<T>> : Prisma__pagesClient<pagesGetPayload<T> | null, null>

    /**
     * Find the first Pages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesFindFirstOrThrowArgs} args - Arguments to find a Pages
     * @example
     * // Get one Pages
     * const pages = await prisma.pages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends pagesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, pagesFindFirstOrThrowArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Find zero or more Pages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pages
     * const pages = await prisma.pages.findMany()
     * 
     * // Get first 10 Pages
     * const pages = await prisma.pages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pagesWithIdOnly = await prisma.pages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends pagesFindManyArgs>(
      args?: SelectSubset<T, pagesFindManyArgs>
    ): Prisma.PrismaPromise<Array<pagesGetPayload<T>>>

    /**
     * Create a Pages.
     * @param {pagesCreateArgs} args - Arguments to create a Pages.
     * @example
     * // Create one Pages
     * const Pages = await prisma.pages.create({
     *   data: {
     *     // ... data to create a Pages
     *   }
     * })
     * 
    **/
    create<T extends pagesCreateArgs>(
      args: SelectSubset<T, pagesCreateArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Delete a Pages.
     * @param {pagesDeleteArgs} args - Arguments to delete one Pages.
     * @example
     * // Delete one Pages
     * const Pages = await prisma.pages.delete({
     *   where: {
     *     // ... filter to delete one Pages
     *   }
     * })
     * 
    **/
    delete<T extends pagesDeleteArgs>(
      args: SelectSubset<T, pagesDeleteArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Update one Pages.
     * @param {pagesUpdateArgs} args - Arguments to update one Pages.
     * @example
     * // Update one Pages
     * const pages = await prisma.pages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pagesUpdateArgs>(
      args: SelectSubset<T, pagesUpdateArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Delete zero or more Pages.
     * @param {pagesDeleteManyArgs} args - Arguments to filter Pages to delete.
     * @example
     * // Delete a few Pages
     * const { count } = await prisma.pages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pagesDeleteManyArgs>(
      args?: SelectSubset<T, pagesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pages
     * const pages = await prisma.pages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pagesUpdateManyArgs>(
      args: SelectSubset<T, pagesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pages.
     * @param {pagesUpsertArgs} args - Arguments to update or create a Pages.
     * @example
     * // Update or create a Pages
     * const pages = await prisma.pages.upsert({
     *   create: {
     *     // ... data to create a Pages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pages we want to update
     *   }
     * })
    **/
    upsert<T extends pagesUpsertArgs>(
      args: SelectSubset<T, pagesUpsertArgs>
    ): Prisma__pagesClient<pagesGetPayload<T>>

    /**
     * Count the number of Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagesCountArgs} args - Arguments to filter Pages to count.
     * @example
     * // Count the number of Pages
     * const count = await prisma.pages.count({
     *   where: {
     *     // ... the filter for the Pages we want to count
     *   }
     * })
    **/
    count<T extends pagesCountArgs>(
      args?: Subset<T, pagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagesAggregateArgs>(args: Subset<T, PagesAggregateArgs>): Prisma.PrismaPromise<GetPagesAggregateType<T>>

    /**
     * Group by Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PagesGroupByArgs['orderBy'] }
        : { orderBy?: PagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for pages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pagesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    document<T extends documentArgs= {}>(args?: Subset<T, documentArgs>): Prisma__documentClient<documentGetPayload<T> | Null>;

    image<T extends pages$imageArgs= {}>(args?: Subset<T, pages$imageArgs>): Prisma.PrismaPromise<Array<imageGetPayload<T>>| Null>;

    revision<T extends pages$revisionArgs= {}>(args?: Subset<T, pages$revisionArgs>): Prisma.PrismaPromise<Array<revisionGetPayload<T>>| Null>;

    comment<T extends pages$commentArgs= {}>(args?: Subset<T, pages$commentArgs>): Prisma.PrismaPromise<Array<commentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * pages base type for findUnique actions
   */
  export type pagesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where: pagesWhereUniqueInput
  }

  /**
   * pages findUnique
   */
  export interface pagesFindUniqueArgs extends pagesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pages findUniqueOrThrow
   */
  export type pagesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where: pagesWhereUniqueInput
  }


  /**
   * pages base type for findFirst actions
   */
  export type pagesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where?: pagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pages to fetch.
     */
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pages.
     */
    cursor?: pagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pages.
     */
    distinct?: Enumerable<PagesScalarFieldEnum>
  }

  /**
   * pages findFirst
   */
  export interface pagesFindFirstArgs extends pagesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pages findFirstOrThrow
   */
  export type pagesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where?: pagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pages to fetch.
     */
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pages.
     */
    cursor?: pagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pages.
     */
    distinct?: Enumerable<PagesScalarFieldEnum>
  }


  /**
   * pages findMany
   */
  export type pagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter, which pages to fetch.
     */
    where?: pagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pages to fetch.
     */
    orderBy?: Enumerable<pagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pages.
     */
    cursor?: pagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pages.
     */
    skip?: number
    distinct?: Enumerable<PagesScalarFieldEnum>
  }


  /**
   * pages create
   */
  export type pagesCreateArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * The data needed to create a pages.
     */
    data: XOR<pagesCreateInput, pagesUncheckedCreateInput>
  }


  /**
   * pages update
   */
  export type pagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * The data needed to update a pages.
     */
    data: XOR<pagesUpdateInput, pagesUncheckedUpdateInput>
    /**
     * Choose, which pages to update.
     */
    where: pagesWhereUniqueInput
  }


  /**
   * pages updateMany
   */
  export type pagesUpdateManyArgs = {
    /**
     * The data used to update pages.
     */
    data: XOR<pagesUpdateManyMutationInput, pagesUncheckedUpdateManyInput>
    /**
     * Filter which pages to update
     */
    where?: pagesWhereInput
  }


  /**
   * pages upsert
   */
  export type pagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * The filter to search for the pages to update in case it exists.
     */
    where: pagesWhereUniqueInput
    /**
     * In case the pages found by the `where` argument doesn't exist, create a new pages with this data.
     */
    create: XOR<pagesCreateInput, pagesUncheckedCreateInput>
    /**
     * In case the pages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pagesUpdateInput, pagesUncheckedUpdateInput>
  }


  /**
   * pages delete
   */
  export type pagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
    /**
     * Filter which pages to delete.
     */
    where: pagesWhereUniqueInput
  }


  /**
   * pages deleteMany
   */
  export type pagesDeleteManyArgs = {
    /**
     * Filter which pages to delete
     */
    where?: pagesWhereInput
  }


  /**
   * pages.image
   */
  export type pages$imageArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    where?: imageWhereInput
    orderBy?: Enumerable<imageOrderByWithRelationInput>
    cursor?: imageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * pages.revision
   */
  export type pages$revisionArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    where?: revisionWhereInput
    orderBy?: Enumerable<revisionOrderByWithRelationInput>
    cursor?: revisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RevisionScalarFieldEnum>
  }


  /**
   * pages.comment
   */
  export type pages$commentArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    where?: commentWhereInput
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * pages without action
   */
  export type pagesArgs = {
    /**
     * Select specific fields to fetch from the pages
     */
    select?: pagesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: pagesInclude | null
  }



  /**
   * Model revision
   */


  export type AggregateRevision = {
    _count: RevisionCountAggregateOutputType | null
    _min: RevisionMinAggregateOutputType | null
    _max: RevisionMaxAggregateOutputType | null
  }

  export type RevisionMinAggregateOutputType = {
    id: string | null
    pageId: string | null
    title: string | null
    content: string | null
    userId: string | null
    published: boolean | null
  }

  export type RevisionMaxAggregateOutputType = {
    id: string | null
    pageId: string | null
    title: string | null
    content: string | null
    userId: string | null
    published: boolean | null
  }

  export type RevisionCountAggregateOutputType = {
    id: number
    pageId: number
    title: number
    content: number
    userId: number
    published: number
    _all: number
  }


  export type RevisionMinAggregateInputType = {
    id?: true
    pageId?: true
    title?: true
    content?: true
    userId?: true
    published?: true
  }

  export type RevisionMaxAggregateInputType = {
    id?: true
    pageId?: true
    title?: true
    content?: true
    userId?: true
    published?: true
  }

  export type RevisionCountAggregateInputType = {
    id?: true
    pageId?: true
    title?: true
    content?: true
    userId?: true
    published?: true
    _all?: true
  }

  export type RevisionAggregateArgs = {
    /**
     * Filter which revision to aggregate.
     */
    where?: revisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of revisions to fetch.
     */
    orderBy?: Enumerable<revisionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: revisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` revisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` revisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned revisions
    **/
    _count?: true | RevisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RevisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RevisionMaxAggregateInputType
  }

  export type GetRevisionAggregateType<T extends RevisionAggregateArgs> = {
        [P in keyof T & keyof AggregateRevision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRevision[P]>
      : GetScalarType<T[P], AggregateRevision[P]>
  }




  export type RevisionGroupByArgs = {
    where?: revisionWhereInput
    orderBy?: Enumerable<revisionOrderByWithAggregationInput>
    by: RevisionScalarFieldEnum[]
    having?: revisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RevisionCountAggregateInputType | true
    _min?: RevisionMinAggregateInputType
    _max?: RevisionMaxAggregateInputType
  }


  export type RevisionGroupByOutputType = {
    id: string
    pageId: string
    title: string | null
    content: string
    userId: string
    published: boolean
    _count: RevisionCountAggregateOutputType | null
    _min: RevisionMinAggregateOutputType | null
    _max: RevisionMaxAggregateOutputType | null
  }

  type GetRevisionGroupByPayload<T extends RevisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RevisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RevisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RevisionGroupByOutputType[P]>
            : GetScalarType<T[P], RevisionGroupByOutputType[P]>
        }
      >
    >


  export type revisionSelect = {
    id?: boolean
    pageId?: boolean
    title?: boolean
    content?: boolean
    userId?: boolean
    published?: boolean
    pages?: boolean | pagesArgs
    user?: boolean | userArgs
    comment?: boolean | revision$commentArgs
    image?: boolean | revision$imageArgs
    _count?: boolean | RevisionCountOutputTypeArgs
  }


  export type revisionInclude = {
    pages?: boolean | pagesArgs
    user?: boolean | userArgs
    comment?: boolean | revision$commentArgs
    image?: boolean | revision$imageArgs
    _count?: boolean | RevisionCountOutputTypeArgs
  }

  export type revisionGetPayload<S extends boolean | null | undefined | revisionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? revision :
    S extends undefined ? never :
    S extends { include: any } & (revisionArgs | revisionFindManyArgs)
    ? revision  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pages' ? pagesGetPayload<S['include'][P]> :
        P extends 'user' ? userGetPayload<S['include'][P]> :
        P extends 'comment' ? Array < commentGetPayload<S['include'][P]>>  :
        P extends 'image' ? Array < imageGetPayload<S['include'][P]>>  :
        P extends '_count' ? RevisionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (revisionArgs | revisionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pages' ? pagesGetPayload<S['select'][P]> :
        P extends 'user' ? userGetPayload<S['select'][P]> :
        P extends 'comment' ? Array < commentGetPayload<S['select'][P]>>  :
        P extends 'image' ? Array < imageGetPayload<S['select'][P]>>  :
        P extends '_count' ? RevisionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof revision ? revision[P] : never
  } 
      : revision


  type revisionCountArgs = 
    Omit<revisionFindManyArgs, 'select' | 'include'> & {
      select?: RevisionCountAggregateInputType | true
    }

  export interface revisionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Revision that matches the filter.
     * @param {revisionFindUniqueArgs} args - Arguments to find a Revision
     * @example
     * // Get one Revision
     * const revision = await prisma.revision.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends revisionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, revisionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'revision'> extends True ? Prisma__revisionClient<revisionGetPayload<T>> : Prisma__revisionClient<revisionGetPayload<T> | null, null>

    /**
     * Find one Revision that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {revisionFindUniqueOrThrowArgs} args - Arguments to find a Revision
     * @example
     * // Get one Revision
     * const revision = await prisma.revision.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends revisionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, revisionFindUniqueOrThrowArgs>
    ): Prisma__revisionClient<revisionGetPayload<T>>

    /**
     * Find the first Revision that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {revisionFindFirstArgs} args - Arguments to find a Revision
     * @example
     * // Get one Revision
     * const revision = await prisma.revision.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends revisionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, revisionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'revision'> extends True ? Prisma__revisionClient<revisionGetPayload<T>> : Prisma__revisionClient<revisionGetPayload<T> | null, null>

    /**
     * Find the first Revision that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {revisionFindFirstOrThrowArgs} args - Arguments to find a Revision
     * @example
     * // Get one Revision
     * const revision = await prisma.revision.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends revisionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, revisionFindFirstOrThrowArgs>
    ): Prisma__revisionClient<revisionGetPayload<T>>

    /**
     * Find zero or more Revisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {revisionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Revisions
     * const revisions = await prisma.revision.findMany()
     * 
     * // Get first 10 Revisions
     * const revisions = await prisma.revision.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const revisionWithIdOnly = await prisma.revision.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends revisionFindManyArgs>(
      args?: SelectSubset<T, revisionFindManyArgs>
    ): Prisma.PrismaPromise<Array<revisionGetPayload<T>>>

    /**
     * Create a Revision.
     * @param {revisionCreateArgs} args - Arguments to create a Revision.
     * @example
     * // Create one Revision
     * const Revision = await prisma.revision.create({
     *   data: {
     *     // ... data to create a Revision
     *   }
     * })
     * 
    **/
    create<T extends revisionCreateArgs>(
      args: SelectSubset<T, revisionCreateArgs>
    ): Prisma__revisionClient<revisionGetPayload<T>>

    /**
     * Delete a Revision.
     * @param {revisionDeleteArgs} args - Arguments to delete one Revision.
     * @example
     * // Delete one Revision
     * const Revision = await prisma.revision.delete({
     *   where: {
     *     // ... filter to delete one Revision
     *   }
     * })
     * 
    **/
    delete<T extends revisionDeleteArgs>(
      args: SelectSubset<T, revisionDeleteArgs>
    ): Prisma__revisionClient<revisionGetPayload<T>>

    /**
     * Update one Revision.
     * @param {revisionUpdateArgs} args - Arguments to update one Revision.
     * @example
     * // Update one Revision
     * const revision = await prisma.revision.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends revisionUpdateArgs>(
      args: SelectSubset<T, revisionUpdateArgs>
    ): Prisma__revisionClient<revisionGetPayload<T>>

    /**
     * Delete zero or more Revisions.
     * @param {revisionDeleteManyArgs} args - Arguments to filter Revisions to delete.
     * @example
     * // Delete a few Revisions
     * const { count } = await prisma.revision.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends revisionDeleteManyArgs>(
      args?: SelectSubset<T, revisionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {revisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Revisions
     * const revision = await prisma.revision.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends revisionUpdateManyArgs>(
      args: SelectSubset<T, revisionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Revision.
     * @param {revisionUpsertArgs} args - Arguments to update or create a Revision.
     * @example
     * // Update or create a Revision
     * const revision = await prisma.revision.upsert({
     *   create: {
     *     // ... data to create a Revision
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Revision we want to update
     *   }
     * })
    **/
    upsert<T extends revisionUpsertArgs>(
      args: SelectSubset<T, revisionUpsertArgs>
    ): Prisma__revisionClient<revisionGetPayload<T>>

    /**
     * Count the number of Revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {revisionCountArgs} args - Arguments to filter Revisions to count.
     * @example
     * // Count the number of Revisions
     * const count = await prisma.revision.count({
     *   where: {
     *     // ... the filter for the Revisions we want to count
     *   }
     * })
    **/
    count<T extends revisionCountArgs>(
      args?: Subset<T, revisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RevisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Revision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RevisionAggregateArgs>(args: Subset<T, RevisionAggregateArgs>): Prisma.PrismaPromise<GetRevisionAggregateType<T>>

    /**
     * Group by Revision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RevisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RevisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RevisionGroupByArgs['orderBy'] }
        : { orderBy?: RevisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RevisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRevisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for revision.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__revisionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    pages<T extends pagesArgs= {}>(args?: Subset<T, pagesArgs>): Prisma__pagesClient<pagesGetPayload<T> | Null>;

    user<T extends userArgs= {}>(args?: Subset<T, userArgs>): Prisma__userClient<userGetPayload<T> | Null>;

    comment<T extends revision$commentArgs= {}>(args?: Subset<T, revision$commentArgs>): Prisma.PrismaPromise<Array<commentGetPayload<T>>| Null>;

    image<T extends revision$imageArgs= {}>(args?: Subset<T, revision$imageArgs>): Prisma.PrismaPromise<Array<imageGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * revision base type for findUnique actions
   */
  export type revisionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    /**
     * Filter, which revision to fetch.
     */
    where: revisionWhereUniqueInput
  }

  /**
   * revision findUnique
   */
  export interface revisionFindUniqueArgs extends revisionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * revision findUniqueOrThrow
   */
  export type revisionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    /**
     * Filter, which revision to fetch.
     */
    where: revisionWhereUniqueInput
  }


  /**
   * revision base type for findFirst actions
   */
  export type revisionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    /**
     * Filter, which revision to fetch.
     */
    where?: revisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of revisions to fetch.
     */
    orderBy?: Enumerable<revisionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for revisions.
     */
    cursor?: revisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` revisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` revisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of revisions.
     */
    distinct?: Enumerable<RevisionScalarFieldEnum>
  }

  /**
   * revision findFirst
   */
  export interface revisionFindFirstArgs extends revisionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * revision findFirstOrThrow
   */
  export type revisionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    /**
     * Filter, which revision to fetch.
     */
    where?: revisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of revisions to fetch.
     */
    orderBy?: Enumerable<revisionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for revisions.
     */
    cursor?: revisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` revisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` revisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of revisions.
     */
    distinct?: Enumerable<RevisionScalarFieldEnum>
  }


  /**
   * revision findMany
   */
  export type revisionFindManyArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    /**
     * Filter, which revisions to fetch.
     */
    where?: revisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of revisions to fetch.
     */
    orderBy?: Enumerable<revisionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing revisions.
     */
    cursor?: revisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` revisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` revisions.
     */
    skip?: number
    distinct?: Enumerable<RevisionScalarFieldEnum>
  }


  /**
   * revision create
   */
  export type revisionCreateArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    /**
     * The data needed to create a revision.
     */
    data: XOR<revisionCreateInput, revisionUncheckedCreateInput>
  }


  /**
   * revision update
   */
  export type revisionUpdateArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    /**
     * The data needed to update a revision.
     */
    data: XOR<revisionUpdateInput, revisionUncheckedUpdateInput>
    /**
     * Choose, which revision to update.
     */
    where: revisionWhereUniqueInput
  }


  /**
   * revision updateMany
   */
  export type revisionUpdateManyArgs = {
    /**
     * The data used to update revisions.
     */
    data: XOR<revisionUpdateManyMutationInput, revisionUncheckedUpdateManyInput>
    /**
     * Filter which revisions to update
     */
    where?: revisionWhereInput
  }


  /**
   * revision upsert
   */
  export type revisionUpsertArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    /**
     * The filter to search for the revision to update in case it exists.
     */
    where: revisionWhereUniqueInput
    /**
     * In case the revision found by the `where` argument doesn't exist, create a new revision with this data.
     */
    create: XOR<revisionCreateInput, revisionUncheckedCreateInput>
    /**
     * In case the revision was found with the provided `where` argument, update it with this data.
     */
    update: XOR<revisionUpdateInput, revisionUncheckedUpdateInput>
  }


  /**
   * revision delete
   */
  export type revisionDeleteArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
    /**
     * Filter which revision to delete.
     */
    where: revisionWhereUniqueInput
  }


  /**
   * revision deleteMany
   */
  export type revisionDeleteManyArgs = {
    /**
     * Filter which revisions to delete
     */
    where?: revisionWhereInput
  }


  /**
   * revision.comment
   */
  export type revision$commentArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    where?: commentWhereInput
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    cursor?: commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * revision.image
   */
  export type revision$imageArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    where?: imageWhereInput
    orderBy?: Enumerable<imageOrderByWithRelationInput>
    cursor?: imageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * revision without action
   */
  export type revisionArgs = {
    /**
     * Select specific fields to fetch from the revision
     */
    select?: revisionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: revisionInclude | null
  }



  /**
   * Model comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    text: string | null
    userId: string | null
    documentId: string | null
    pageId: string | null
    revisionId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    text: string | null
    userId: string | null
    documentId: string | null
    pageId: string | null
    revisionId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    text: number
    userId: number
    documentId: number
    pageId: number
    revisionId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    text?: true
    userId?: true
    documentId?: true
    pageId?: true
    revisionId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    text?: true
    userId?: true
    documentId?: true
    pageId?: true
    revisionId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    text?: true
    userId?: true
    documentId?: true
    pageId?: true
    revisionId?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which comment to aggregate.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: commentWhereInput
    orderBy?: Enumerable<commentOrderByWithAggregationInput>
    by: CommentScalarFieldEnum[]
    having?: commentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: string
    text: string
    userId: string
    documentId: string | null
    pageId: string | null
    revisionId: string | null
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type commentSelect = {
    id?: boolean
    text?: boolean
    userId?: boolean
    documentId?: boolean
    pageId?: boolean
    revisionId?: boolean
    user?: boolean | userArgs
    document?: boolean | documentArgs
    pages?: boolean | pagesArgs
    revision?: boolean | revisionArgs
  }


  export type commentInclude = {
    user?: boolean | userArgs
    document?: boolean | documentArgs
    pages?: boolean | pagesArgs
    revision?: boolean | revisionArgs
  }

  export type commentGetPayload<S extends boolean | null | undefined | commentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? comment :
    S extends undefined ? never :
    S extends { include: any } & (commentArgs | commentFindManyArgs)
    ? comment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? userGetPayload<S['include'][P]> :
        P extends 'document' ? documentGetPayload<S['include'][P]> | null :
        P extends 'pages' ? pagesGetPayload<S['include'][P]> | null :
        P extends 'revision' ? revisionGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (commentArgs | commentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? userGetPayload<S['select'][P]> :
        P extends 'document' ? documentGetPayload<S['select'][P]> | null :
        P extends 'pages' ? pagesGetPayload<S['select'][P]> | null :
        P extends 'revision' ? revisionGetPayload<S['select'][P]> | null :  P extends keyof comment ? comment[P] : never
  } 
      : comment


  type commentCountArgs = 
    Omit<commentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface commentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Comment that matches the filter.
     * @param {commentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, commentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'comment'> extends True ? Prisma__commentClient<commentGetPayload<T>> : Prisma__commentClient<commentGetPayload<T> | null, null>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {commentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, commentFindUniqueOrThrowArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, commentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'comment'> extends True ? Prisma__commentClient<commentGetPayload<T>> : Prisma__commentClient<commentGetPayload<T> | null, null>

    /**
     * Find the first Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, commentFindFirstOrThrowArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentFindManyArgs>(
      args?: SelectSubset<T, commentFindManyArgs>
    ): Prisma.PrismaPromise<Array<commentGetPayload<T>>>

    /**
     * Create a Comment.
     * @param {commentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends commentCreateArgs>(
      args: SelectSubset<T, commentCreateArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Delete a Comment.
     * @param {commentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends commentDeleteArgs>(
      args: SelectSubset<T, commentDeleteArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Update one Comment.
     * @param {commentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentUpdateArgs>(
      args: SelectSubset<T, commentUpdateArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Delete zero or more Comments.
     * @param {commentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentDeleteManyArgs>(
      args?: SelectSubset<T, commentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentUpdateManyArgs>(
      args: SelectSubset<T, commentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {commentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends commentUpsertArgs>(
      args: SelectSubset<T, commentUpsertArgs>
    ): Prisma__commentClient<commentGetPayload<T>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentCountArgs>(
      args?: Subset<T, commentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends userArgs= {}>(args?: Subset<T, userArgs>): Prisma__userClient<userGetPayload<T> | Null>;

    document<T extends documentArgs= {}>(args?: Subset<T, documentArgs>): Prisma__documentClient<documentGetPayload<T> | Null>;

    pages<T extends pagesArgs= {}>(args?: Subset<T, pagesArgs>): Prisma__pagesClient<pagesGetPayload<T> | Null>;

    revision<T extends revisionArgs= {}>(args?: Subset<T, revisionArgs>): Prisma__revisionClient<revisionGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * comment base type for findUnique actions
   */
  export type commentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     */
    where: commentWhereUniqueInput
  }

  /**
   * comment findUnique
   */
  export interface commentFindUniqueArgs extends commentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * comment findUniqueOrThrow
   */
  export type commentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     */
    where: commentWhereUniqueInput
  }


  /**
   * comment base type for findFirst actions
   */
  export type commentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }

  /**
   * comment findFirst
   */
  export interface commentFindFirstArgs extends commentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * comment findFirstOrThrow
   */
  export type commentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * comment findMany
   */
  export type commentFindManyArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter, which comments to fetch.
     */
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     */
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     */
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     */
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * comment create
   */
  export type commentCreateArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * The data needed to create a comment.
     */
    data: XOR<commentCreateInput, commentUncheckedCreateInput>
  }


  /**
   * comment update
   */
  export type commentUpdateArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * The data needed to update a comment.
     */
    data: XOR<commentUpdateInput, commentUncheckedUpdateInput>
    /**
     * Choose, which comment to update.
     */
    where: commentWhereUniqueInput
  }


  /**
   * comment updateMany
   */
  export type commentUpdateManyArgs = {
    /**
     * The data used to update comments.
     */
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     */
    where?: commentWhereInput
  }


  /**
   * comment upsert
   */
  export type commentUpsertArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * The filter to search for the comment to update in case it exists.
     */
    where: commentWhereUniqueInput
    /**
     * In case the comment found by the `where` argument doesn't exist, create a new comment with this data.
     */
    create: XOR<commentCreateInput, commentUncheckedCreateInput>
    /**
     * In case the comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commentUpdateInput, commentUncheckedUpdateInput>
  }


  /**
   * comment delete
   */
  export type commentDeleteArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
    /**
     * Filter which comment to delete.
     */
    where: commentWhereUniqueInput
  }


  /**
   * comment deleteMany
   */
  export type commentDeleteManyArgs = {
    /**
     * Filter which comments to delete
     */
    where?: commentWhereInput
  }


  /**
   * comment without action
   */
  export type commentArgs = {
    /**
     * Select specific fields to fetch from the comment
     */
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commentInclude | null
  }



  /**
   * Model image
   */


  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    pageId: string | null
    revisionId: string | null
    type: string | null
    size: string | null
    image: string | null
    dimension: string | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    pageId: string | null
    revisionId: string | null
    type: string | null
    size: string | null
    image: string | null
    dimension: string | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    pageId: number
    revisionId: number
    type: number
    size: number
    image: number
    dimension: number
    _all: number
  }


  export type ImageMinAggregateInputType = {
    id?: true
    pageId?: true
    revisionId?: true
    type?: true
    size?: true
    image?: true
    dimension?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    pageId?: true
    revisionId?: true
    type?: true
    size?: true
    image?: true
    dimension?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    pageId?: true
    revisionId?: true
    type?: true
    size?: true
    image?: true
    dimension?: true
    _all?: true
  }

  export type ImageAggregateArgs = {
    /**
     * Filter which image to aggregate.
     */
    where?: imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: Enumerable<imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs = {
    where?: imageWhereInput
    orderBy?: Enumerable<imageOrderByWithAggregationInput>
    by: ImageScalarFieldEnum[]
    having?: imageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }


  export type ImageGroupByOutputType = {
    id: string
    pageId: string | null
    revisionId: string | null
    type: string | null
    size: string | null
    image: string
    dimension: string
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type imageSelect = {
    id?: boolean
    pageId?: boolean
    revisionId?: boolean
    type?: boolean
    size?: boolean
    image?: boolean
    dimension?: boolean
    pages?: boolean | pagesArgs
    revision?: boolean | revisionArgs
  }


  export type imageInclude = {
    pages?: boolean | pagesArgs
    revision?: boolean | revisionArgs
  }

  export type imageGetPayload<S extends boolean | null | undefined | imageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? image :
    S extends undefined ? never :
    S extends { include: any } & (imageArgs | imageFindManyArgs)
    ? image  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'pages' ? pagesGetPayload<S['include'][P]> | null :
        P extends 'revision' ? revisionGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (imageArgs | imageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'pages' ? pagesGetPayload<S['select'][P]> | null :
        P extends 'revision' ? revisionGetPayload<S['select'][P]> | null :  P extends keyof image ? image[P] : never
  } 
      : image


  type imageCountArgs = 
    Omit<imageFindManyArgs, 'select' | 'include'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface imageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Image that matches the filter.
     * @param {imageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends imageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, imageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'image'> extends True ? Prisma__imageClient<imageGetPayload<T>> : Prisma__imageClient<imageGetPayload<T> | null, null>

    /**
     * Find one Image that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {imageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends imageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, imageFindUniqueOrThrowArgs>
    ): Prisma__imageClient<imageGetPayload<T>>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends imageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, imageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'image'> extends True ? Prisma__imageClient<imageGetPayload<T>> : Prisma__imageClient<imageGetPayload<T> | null, null>

    /**
     * Find the first Image that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends imageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, imageFindFirstOrThrowArgs>
    ): Prisma__imageClient<imageGetPayload<T>>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends imageFindManyArgs>(
      args?: SelectSubset<T, imageFindManyArgs>
    ): Prisma.PrismaPromise<Array<imageGetPayload<T>>>

    /**
     * Create a Image.
     * @param {imageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends imageCreateArgs>(
      args: SelectSubset<T, imageCreateArgs>
    ): Prisma__imageClient<imageGetPayload<T>>

    /**
     * Delete a Image.
     * @param {imageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends imageDeleteArgs>(
      args: SelectSubset<T, imageDeleteArgs>
    ): Prisma__imageClient<imageGetPayload<T>>

    /**
     * Update one Image.
     * @param {imageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends imageUpdateArgs>(
      args: SelectSubset<T, imageUpdateArgs>
    ): Prisma__imageClient<imageGetPayload<T>>

    /**
     * Delete zero or more Images.
     * @param {imageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends imageDeleteManyArgs>(
      args?: SelectSubset<T, imageDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends imageUpdateManyArgs>(
      args: SelectSubset<T, imageUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {imageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends imageUpsertArgs>(
      args: SelectSubset<T, imageUpsertArgs>
    ): Prisma__imageClient<imageGetPayload<T>>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {imageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends imageCountArgs>(
      args?: Subset<T, imageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__imageClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    pages<T extends pagesArgs= {}>(args?: Subset<T, pagesArgs>): Prisma__pagesClient<pagesGetPayload<T> | Null>;

    revision<T extends revisionArgs= {}>(args?: Subset<T, revisionArgs>): Prisma__revisionClient<revisionGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * image base type for findUnique actions
   */
  export type imageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    /**
     * Filter, which image to fetch.
     */
    where: imageWhereUniqueInput
  }

  /**
   * image findUnique
   */
  export interface imageFindUniqueArgs extends imageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * image findUniqueOrThrow
   */
  export type imageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    /**
     * Filter, which image to fetch.
     */
    where: imageWhereUniqueInput
  }


  /**
   * image base type for findFirst actions
   */
  export type imageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    /**
     * Filter, which image to fetch.
     */
    where?: imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: Enumerable<imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: Enumerable<ImageScalarFieldEnum>
  }

  /**
   * image findFirst
   */
  export interface imageFindFirstArgs extends imageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * image findFirstOrThrow
   */
  export type imageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    /**
     * Filter, which image to fetch.
     */
    where?: imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: Enumerable<imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for images.
     */
    cursor?: imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of images.
     */
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * image findMany
   */
  export type imageFindManyArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    /**
     * Filter, which images to fetch.
     */
    where?: imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of images to fetch.
     */
    orderBy?: Enumerable<imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing images.
     */
    cursor?: imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` images.
     */
    skip?: number
    distinct?: Enumerable<ImageScalarFieldEnum>
  }


  /**
   * image create
   */
  export type imageCreateArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    /**
     * The data needed to create a image.
     */
    data: XOR<imageCreateInput, imageUncheckedCreateInput>
  }


  /**
   * image update
   */
  export type imageUpdateArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    /**
     * The data needed to update a image.
     */
    data: XOR<imageUpdateInput, imageUncheckedUpdateInput>
    /**
     * Choose, which image to update.
     */
    where: imageWhereUniqueInput
  }


  /**
   * image updateMany
   */
  export type imageUpdateManyArgs = {
    /**
     * The data used to update images.
     */
    data: XOR<imageUpdateManyMutationInput, imageUncheckedUpdateManyInput>
    /**
     * Filter which images to update
     */
    where?: imageWhereInput
  }


  /**
   * image upsert
   */
  export type imageUpsertArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    /**
     * The filter to search for the image to update in case it exists.
     */
    where: imageWhereUniqueInput
    /**
     * In case the image found by the `where` argument doesn't exist, create a new image with this data.
     */
    create: XOR<imageCreateInput, imageUncheckedCreateInput>
    /**
     * In case the image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<imageUpdateInput, imageUncheckedUpdateInput>
  }


  /**
   * image delete
   */
  export type imageDeleteArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
    /**
     * Filter which image to delete.
     */
    where: imageWhereUniqueInput
  }


  /**
   * image deleteMany
   */
  export type imageDeleteManyArgs = {
    /**
     * Filter which images to delete
     */
    where?: imageWhereInput
  }


  /**
   * image without action
   */
  export type imageArgs = {
    /**
     * Select specific fields to fetch from the image
     */
    select?: imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: imageInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CommentScalarFieldEnum: {
    id: 'id',
    text: 'text',
    userId: 'userId',
    documentId: 'documentId',
    pageId: 'pageId',
    revisionId: 'revisionId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    userId: 'userId',
    active: 'active'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    pageId: 'pageId',
    revisionId: 'revisionId',
    type: 'type',
    size: 'size',
    image: 'image',
    dimension: 'dimension'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const PagesScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    pageNumber: 'pageNumber',
    title: 'title',
    content: 'content',
    active: 'active'
  };

  export type PagesScalarFieldEnum = (typeof PagesScalarFieldEnum)[keyof typeof PagesScalarFieldEnum]


  export const RevisionScalarFieldEnum: {
    id: 'id',
    pageId: 'pageId',
    title: 'title',
    content: 'content',
    userId: 'userId',
    published: 'published'
  };

  export type RevisionScalarFieldEnum = (typeof RevisionScalarFieldEnum)[keyof typeof RevisionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    dateOfBirth?: StringFilter | string
    gender?: StringFilter | string
    document?: DocumentListRelationFilter
    comment?: CommentListRelationFilter
    revision?: RevisionListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    document?: documentOrderByRelationAggregateInput
    comment?: commentOrderByRelationAggregateInput
    revision?: revisionOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    dateOfBirth?: StringWithAggregatesFilter | string
    gender?: StringWithAggregatesFilter | string
  }

  export type documentWhereInput = {
    AND?: Enumerable<documentWhereInput>
    OR?: Enumerable<documentWhereInput>
    NOT?: Enumerable<documentWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    userId?: StringFilter | string
    active?: BoolFilter | boolean
    user?: XOR<UserRelationFilter, userWhereInput>
    pages?: PagesListRelationFilter
    comment?: CommentListRelationFilter
  }

  export type documentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    active?: SortOrder
    user?: userOrderByWithRelationInput
    pages?: pagesOrderByRelationAggregateInput
    comment?: commentOrderByRelationAggregateInput
  }

  export type documentWhereUniqueInput = {
    id?: string
  }

  export type documentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    active?: SortOrder
    _count?: documentCountOrderByAggregateInput
    _max?: documentMaxOrderByAggregateInput
    _min?: documentMinOrderByAggregateInput
  }

  export type documentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<documentScalarWhereWithAggregatesInput>
    OR?: Enumerable<documentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<documentScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    userId?: StringWithAggregatesFilter | string
    active?: BoolWithAggregatesFilter | boolean
  }

  export type pagesWhereInput = {
    AND?: Enumerable<pagesWhereInput>
    OR?: Enumerable<pagesWhereInput>
    NOT?: Enumerable<pagesWhereInput>
    id?: StringFilter | string
    documentId?: StringFilter | string
    pageNumber?: IntFilter | number
    title?: StringNullableFilter | string | null
    content?: StringFilter | string
    active?: BoolFilter | boolean
    document?: XOR<DocumentRelationFilter, documentWhereInput>
    image?: ImageListRelationFilter
    revision?: RevisionListRelationFilter
    comment?: CommentListRelationFilter
  }

  export type pagesOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    pageNumber?: SortOrder
    title?: SortOrder
    content?: SortOrder
    active?: SortOrder
    document?: documentOrderByWithRelationInput
    image?: imageOrderByRelationAggregateInput
    revision?: revisionOrderByRelationAggregateInput
    comment?: commentOrderByRelationAggregateInput
  }

  export type pagesWhereUniqueInput = {
    id?: string
  }

  export type pagesOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    pageNumber?: SortOrder
    title?: SortOrder
    content?: SortOrder
    active?: SortOrder
    _count?: pagesCountOrderByAggregateInput
    _avg?: pagesAvgOrderByAggregateInput
    _max?: pagesMaxOrderByAggregateInput
    _min?: pagesMinOrderByAggregateInput
    _sum?: pagesSumOrderByAggregateInput
  }

  export type pagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<pagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<pagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<pagesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    documentId?: StringWithAggregatesFilter | string
    pageNumber?: IntWithAggregatesFilter | number
    title?: StringNullableWithAggregatesFilter | string | null
    content?: StringWithAggregatesFilter | string
    active?: BoolWithAggregatesFilter | boolean
  }

  export type revisionWhereInput = {
    AND?: Enumerable<revisionWhereInput>
    OR?: Enumerable<revisionWhereInput>
    NOT?: Enumerable<revisionWhereInput>
    id?: StringFilter | string
    pageId?: StringFilter | string
    title?: StringNullableFilter | string | null
    content?: StringFilter | string
    userId?: StringFilter | string
    published?: BoolFilter | boolean
    pages?: XOR<PagesRelationFilter, pagesWhereInput>
    user?: XOR<UserRelationFilter, userWhereInput>
    comment?: CommentListRelationFilter
    image?: ImageListRelationFilter
  }

  export type revisionOrderByWithRelationInput = {
    id?: SortOrder
    pageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    published?: SortOrder
    pages?: pagesOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    comment?: commentOrderByRelationAggregateInput
    image?: imageOrderByRelationAggregateInput
  }

  export type revisionWhereUniqueInput = {
    id?: string
  }

  export type revisionOrderByWithAggregationInput = {
    id?: SortOrder
    pageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    published?: SortOrder
    _count?: revisionCountOrderByAggregateInput
    _max?: revisionMaxOrderByAggregateInput
    _min?: revisionMinOrderByAggregateInput
  }

  export type revisionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<revisionScalarWhereWithAggregatesInput>
    OR?: Enumerable<revisionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<revisionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    pageId?: StringWithAggregatesFilter | string
    title?: StringNullableWithAggregatesFilter | string | null
    content?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    published?: BoolWithAggregatesFilter | boolean
  }

  export type commentWhereInput = {
    AND?: Enumerable<commentWhereInput>
    OR?: Enumerable<commentWhereInput>
    NOT?: Enumerable<commentWhereInput>
    id?: StringFilter | string
    text?: StringFilter | string
    userId?: StringFilter | string
    documentId?: StringNullableFilter | string | null
    pageId?: StringNullableFilter | string | null
    revisionId?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, userWhereInput>
    document?: XOR<DocumentRelationFilter, documentWhereInput> | null
    pages?: XOR<PagesRelationFilter, pagesWhereInput> | null
    revision?: XOR<RevisionRelationFilter, revisionWhereInput> | null
  }

  export type commentOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    documentId?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
    user?: userOrderByWithRelationInput
    document?: documentOrderByWithRelationInput
    pages?: pagesOrderByWithRelationInput
    revision?: revisionOrderByWithRelationInput
  }

  export type commentWhereUniqueInput = {
    id?: string
  }

  export type commentOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    documentId?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
    _count?: commentCountOrderByAggregateInput
    _max?: commentMaxOrderByAggregateInput
    _min?: commentMinOrderByAggregateInput
  }

  export type commentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<commentScalarWhereWithAggregatesInput>
    OR?: Enumerable<commentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<commentScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    text?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    documentId?: StringNullableWithAggregatesFilter | string | null
    pageId?: StringNullableWithAggregatesFilter | string | null
    revisionId?: StringNullableWithAggregatesFilter | string | null
  }

  export type imageWhereInput = {
    AND?: Enumerable<imageWhereInput>
    OR?: Enumerable<imageWhereInput>
    NOT?: Enumerable<imageWhereInput>
    id?: StringFilter | string
    pageId?: StringNullableFilter | string | null
    revisionId?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    size?: StringNullableFilter | string | null
    image?: StringFilter | string
    dimension?: StringFilter | string
    pages?: XOR<PagesRelationFilter, pagesWhereInput> | null
    revision?: XOR<RevisionRelationFilter, revisionWhereInput> | null
  }

  export type imageOrderByWithRelationInput = {
    id?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
    type?: SortOrder
    size?: SortOrder
    image?: SortOrder
    dimension?: SortOrder
    pages?: pagesOrderByWithRelationInput
    revision?: revisionOrderByWithRelationInput
  }

  export type imageWhereUniqueInput = {
    id?: string
  }

  export type imageOrderByWithAggregationInput = {
    id?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
    type?: SortOrder
    size?: SortOrder
    image?: SortOrder
    dimension?: SortOrder
    _count?: imageCountOrderByAggregateInput
    _max?: imageMaxOrderByAggregateInput
    _min?: imageMinOrderByAggregateInput
  }

  export type imageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<imageScalarWhereWithAggregatesInput>
    OR?: Enumerable<imageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<imageScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    pageId?: StringNullableWithAggregatesFilter | string | null
    revisionId?: StringNullableWithAggregatesFilter | string | null
    type?: StringNullableWithAggregatesFilter | string | null
    size?: StringNullableWithAggregatesFilter | string | null
    image?: StringWithAggregatesFilter | string
    dimension?: StringWithAggregatesFilter | string
  }

  export type userCreateInput = {
    id?: string
    name: string
    email: string
    dateOfBirth: string
    gender: string
    document?: documentCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
    revision?: revisionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    dateOfBirth: string
    gender: string
    document?: documentUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    revision?: revisionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    document?: documentUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
    revision?: revisionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    document?: documentUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    revision?: revisionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type documentCreateInput = {
    id?: string
    name: string
    description?: string | null
    active: boolean
    user: userCreateNestedOneWithoutDocumentInput
    pages?: pagesCreateNestedManyWithoutDocumentInput
    comment?: commentCreateNestedManyWithoutDocumentInput
  }

  export type documentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    active: boolean
    pages?: pagesUncheckedCreateNestedManyWithoutDocumentInput
    comment?: commentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type documentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutDocumentNestedInput
    pages?: pagesUpdateManyWithoutDocumentNestedInput
    comment?: commentUpdateManyWithoutDocumentNestedInput
  }

  export type documentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUncheckedUpdateManyWithoutDocumentNestedInput
    comment?: commentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type documentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type documentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type pagesCreateInput = {
    id?: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    document: documentCreateNestedOneWithoutPagesInput
    image?: imageCreateNestedManyWithoutPagesInput
    revision?: revisionCreateNestedManyWithoutPagesInput
    comment?: commentCreateNestedManyWithoutPagesInput
  }

  export type pagesUncheckedCreateInput = {
    id?: string
    documentId: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    image?: imageUncheckedCreateNestedManyWithoutPagesInput
    revision?: revisionUncheckedCreateNestedManyWithoutPagesInput
    comment?: commentUncheckedCreateNestedManyWithoutPagesInput
  }

  export type pagesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    document?: documentUpdateOneRequiredWithoutPagesNestedInput
    image?: imageUpdateManyWithoutPagesNestedInput
    revision?: revisionUpdateManyWithoutPagesNestedInput
    comment?: commentUpdateManyWithoutPagesNestedInput
  }

  export type pagesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    image?: imageUncheckedUpdateManyWithoutPagesNestedInput
    revision?: revisionUncheckedUpdateManyWithoutPagesNestedInput
    comment?: commentUncheckedUpdateManyWithoutPagesNestedInput
  }

  export type pagesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type pagesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type revisionCreateInput = {
    id?: string
    title?: string | null
    content: string
    published: boolean
    pages: pagesCreateNestedOneWithoutRevisionInput
    user: userCreateNestedOneWithoutRevisionInput
    comment?: commentCreateNestedManyWithoutRevisionInput
    image?: imageCreateNestedManyWithoutRevisionInput
  }

  export type revisionUncheckedCreateInput = {
    id?: string
    pageId: string
    title?: string | null
    content: string
    userId: string
    published: boolean
    comment?: commentUncheckedCreateNestedManyWithoutRevisionInput
    image?: imageUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type revisionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUpdateOneRequiredWithoutRevisionNestedInput
    user?: userUpdateOneRequiredWithoutRevisionNestedInput
    comment?: commentUpdateManyWithoutRevisionNestedInput
    image?: imageUpdateManyWithoutRevisionNestedInput
  }

  export type revisionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    comment?: commentUncheckedUpdateManyWithoutRevisionNestedInput
    image?: imageUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type revisionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type revisionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type commentCreateInput = {
    id?: string
    text: string
    user: userCreateNestedOneWithoutCommentInput
    document?: documentCreateNestedOneWithoutCommentInput
    pages?: pagesCreateNestedOneWithoutCommentInput
    revision?: revisionCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateInput = {
    id?: string
    text: string
    userId: string
    documentId?: string | null
    pageId?: string | null
    revisionId?: string | null
  }

  export type commentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutCommentNestedInput
    document?: documentUpdateOneWithoutCommentNestedInput
    pages?: pagesUpdateOneWithoutCommentNestedInput
    revision?: revisionUpdateOneWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type commentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type imageCreateInput = {
    id?: string
    type?: string | null
    size?: string | null
    image: string
    dimension: string
    pages?: pagesCreateNestedOneWithoutImageInput
    revision?: revisionCreateNestedOneWithoutImageInput
  }

  export type imageUncheckedCreateInput = {
    id?: string
    pageId?: string | null
    revisionId?: string | null
    type?: string | null
    size?: string | null
    image: string
    dimension: string
  }

  export type imageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    dimension?: StringFieldUpdateOperationsInput | string
    pages?: pagesUpdateOneWithoutImageNestedInput
    revision?: revisionUpdateOneWithoutImageNestedInput
  }

  export type imageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    dimension?: StringFieldUpdateOperationsInput | string
  }

  export type imageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    dimension?: StringFieldUpdateOperationsInput | string
  }

  export type imageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    dimension?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DocumentListRelationFilter = {
    every?: documentWhereInput
    some?: documentWhereInput
    none?: documentWhereInput
  }

  export type CommentListRelationFilter = {
    every?: commentWhereInput
    some?: commentWhereInput
    none?: commentWhereInput
  }

  export type RevisionListRelationFilter = {
    every?: revisionWhereInput
    some?: revisionWhereInput
    none?: revisionWhereInput
  }

  export type documentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type revisionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type PagesListRelationFilter = {
    every?: pagesWhereInput
    some?: pagesWhereInput
    none?: pagesWhereInput
  }

  export type pagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type documentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    active?: SortOrder
  }

  export type documentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    active?: SortOrder
  }

  export type documentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    active?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DocumentRelationFilter = {
    is?: documentWhereInput | null
    isNot?: documentWhereInput | null
  }

  export type ImageListRelationFilter = {
    every?: imageWhereInput
    some?: imageWhereInput
    none?: imageWhereInput
  }

  export type imageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type pagesCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    pageNumber?: SortOrder
    title?: SortOrder
    content?: SortOrder
    active?: SortOrder
  }

  export type pagesAvgOrderByAggregateInput = {
    pageNumber?: SortOrder
  }

  export type pagesMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    pageNumber?: SortOrder
    title?: SortOrder
    content?: SortOrder
    active?: SortOrder
  }

  export type pagesMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    pageNumber?: SortOrder
    title?: SortOrder
    content?: SortOrder
    active?: SortOrder
  }

  export type pagesSumOrderByAggregateInput = {
    pageNumber?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type PagesRelationFilter = {
    is?: pagesWhereInput | null
    isNot?: pagesWhereInput | null
  }

  export type revisionCountOrderByAggregateInput = {
    id?: SortOrder
    pageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    published?: SortOrder
  }

  export type revisionMaxOrderByAggregateInput = {
    id?: SortOrder
    pageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    published?: SortOrder
  }

  export type revisionMinOrderByAggregateInput = {
    id?: SortOrder
    pageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    published?: SortOrder
  }

  export type RevisionRelationFilter = {
    is?: revisionWhereInput | null
    isNot?: revisionWhereInput | null
  }

  export type commentCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    documentId?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
  }

  export type commentMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    documentId?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
  }

  export type commentMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    documentId?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
  }

  export type imageCountOrderByAggregateInput = {
    id?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
    type?: SortOrder
    size?: SortOrder
    image?: SortOrder
    dimension?: SortOrder
  }

  export type imageMaxOrderByAggregateInput = {
    id?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
    type?: SortOrder
    size?: SortOrder
    image?: SortOrder
    dimension?: SortOrder
  }

  export type imageMinOrderByAggregateInput = {
    id?: SortOrder
    pageId?: SortOrder
    revisionId?: SortOrder
    type?: SortOrder
    size?: SortOrder
    image?: SortOrder
    dimension?: SortOrder
  }

  export type documentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<documentCreateWithoutUserInput>, Enumerable<documentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<documentCreateOrConnectWithoutUserInput>
    connect?: Enumerable<documentWhereUniqueInput>
  }

  export type commentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<commentCreateWithoutUserInput>, Enumerable<commentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutUserInput>
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type revisionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<revisionCreateWithoutUserInput>, Enumerable<revisionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<revisionCreateOrConnectWithoutUserInput>
    connect?: Enumerable<revisionWhereUniqueInput>
  }

  export type documentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<documentCreateWithoutUserInput>, Enumerable<documentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<documentCreateOrConnectWithoutUserInput>
    connect?: Enumerable<documentWhereUniqueInput>
  }

  export type commentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<commentCreateWithoutUserInput>, Enumerable<commentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutUserInput>
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type revisionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<revisionCreateWithoutUserInput>, Enumerable<revisionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<revisionCreateOrConnectWithoutUserInput>
    connect?: Enumerable<revisionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type documentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<documentCreateWithoutUserInput>, Enumerable<documentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<documentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<documentUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<documentWhereUniqueInput>
    disconnect?: Enumerable<documentWhereUniqueInput>
    delete?: Enumerable<documentWhereUniqueInput>
    connect?: Enumerable<documentWhereUniqueInput>
    update?: Enumerable<documentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<documentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<documentScalarWhereInput>
  }

  export type commentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutUserInput>, Enumerable<commentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type revisionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<revisionCreateWithoutUserInput>, Enumerable<revisionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<revisionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<revisionUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<revisionWhereUniqueInput>
    disconnect?: Enumerable<revisionWhereUniqueInput>
    delete?: Enumerable<revisionWhereUniqueInput>
    connect?: Enumerable<revisionWhereUniqueInput>
    update?: Enumerable<revisionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<revisionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<revisionScalarWhereInput>
  }

  export type documentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<documentCreateWithoutUserInput>, Enumerable<documentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<documentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<documentUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<documentWhereUniqueInput>
    disconnect?: Enumerable<documentWhereUniqueInput>
    delete?: Enumerable<documentWhereUniqueInput>
    connect?: Enumerable<documentWhereUniqueInput>
    update?: Enumerable<documentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<documentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<documentScalarWhereInput>
  }

  export type commentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutUserInput>, Enumerable<commentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type revisionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<revisionCreateWithoutUserInput>, Enumerable<revisionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<revisionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<revisionUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<revisionWhereUniqueInput>
    disconnect?: Enumerable<revisionWhereUniqueInput>
    delete?: Enumerable<revisionWhereUniqueInput>
    connect?: Enumerable<revisionWhereUniqueInput>
    update?: Enumerable<revisionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<revisionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<revisionScalarWhereInput>
  }

  export type userCreateNestedOneWithoutDocumentInput = {
    create?: XOR<userCreateWithoutDocumentInput, userUncheckedCreateWithoutDocumentInput>
    connectOrCreate?: userCreateOrConnectWithoutDocumentInput
    connect?: userWhereUniqueInput
  }

  export type pagesCreateNestedManyWithoutDocumentInput = {
    create?: XOR<Enumerable<pagesCreateWithoutDocumentInput>, Enumerable<pagesUncheckedCreateWithoutDocumentInput>>
    connectOrCreate?: Enumerable<pagesCreateOrConnectWithoutDocumentInput>
    connect?: Enumerable<pagesWhereUniqueInput>
  }

  export type commentCreateNestedManyWithoutDocumentInput = {
    create?: XOR<Enumerable<commentCreateWithoutDocumentInput>, Enumerable<commentUncheckedCreateWithoutDocumentInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutDocumentInput>
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type pagesUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<Enumerable<pagesCreateWithoutDocumentInput>, Enumerable<pagesUncheckedCreateWithoutDocumentInput>>
    connectOrCreate?: Enumerable<pagesCreateOrConnectWithoutDocumentInput>
    connect?: Enumerable<pagesWhereUniqueInput>
  }

  export type commentUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<Enumerable<commentCreateWithoutDocumentInput>, Enumerable<commentUncheckedCreateWithoutDocumentInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutDocumentInput>
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type userUpdateOneRequiredWithoutDocumentNestedInput = {
    create?: XOR<userCreateWithoutDocumentInput, userUncheckedCreateWithoutDocumentInput>
    connectOrCreate?: userCreateOrConnectWithoutDocumentInput
    upsert?: userUpsertWithoutDocumentInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutDocumentInput, userUncheckedUpdateWithoutDocumentInput>
  }

  export type pagesUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<Enumerable<pagesCreateWithoutDocumentInput>, Enumerable<pagesUncheckedCreateWithoutDocumentInput>>
    connectOrCreate?: Enumerable<pagesCreateOrConnectWithoutDocumentInput>
    upsert?: Enumerable<pagesUpsertWithWhereUniqueWithoutDocumentInput>
    set?: Enumerable<pagesWhereUniqueInput>
    disconnect?: Enumerable<pagesWhereUniqueInput>
    delete?: Enumerable<pagesWhereUniqueInput>
    connect?: Enumerable<pagesWhereUniqueInput>
    update?: Enumerable<pagesUpdateWithWhereUniqueWithoutDocumentInput>
    updateMany?: Enumerable<pagesUpdateManyWithWhereWithoutDocumentInput>
    deleteMany?: Enumerable<pagesScalarWhereInput>
  }

  export type commentUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutDocumentInput>, Enumerable<commentUncheckedCreateWithoutDocumentInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutDocumentInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutDocumentInput>
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutDocumentInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutDocumentInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type pagesUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<Enumerable<pagesCreateWithoutDocumentInput>, Enumerable<pagesUncheckedCreateWithoutDocumentInput>>
    connectOrCreate?: Enumerable<pagesCreateOrConnectWithoutDocumentInput>
    upsert?: Enumerable<pagesUpsertWithWhereUniqueWithoutDocumentInput>
    set?: Enumerable<pagesWhereUniqueInput>
    disconnect?: Enumerable<pagesWhereUniqueInput>
    delete?: Enumerable<pagesWhereUniqueInput>
    connect?: Enumerable<pagesWhereUniqueInput>
    update?: Enumerable<pagesUpdateWithWhereUniqueWithoutDocumentInput>
    updateMany?: Enumerable<pagesUpdateManyWithWhereWithoutDocumentInput>
    deleteMany?: Enumerable<pagesScalarWhereInput>
  }

  export type commentUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutDocumentInput>, Enumerable<commentUncheckedCreateWithoutDocumentInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutDocumentInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutDocumentInput>
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutDocumentInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutDocumentInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type documentCreateNestedOneWithoutPagesInput = {
    create?: XOR<documentCreateWithoutPagesInput, documentUncheckedCreateWithoutPagesInput>
    connectOrCreate?: documentCreateOrConnectWithoutPagesInput
    connect?: documentWhereUniqueInput
  }

  export type imageCreateNestedManyWithoutPagesInput = {
    create?: XOR<Enumerable<imageCreateWithoutPagesInput>, Enumerable<imageUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<imageCreateOrConnectWithoutPagesInput>
    connect?: Enumerable<imageWhereUniqueInput>
  }

  export type revisionCreateNestedManyWithoutPagesInput = {
    create?: XOR<Enumerable<revisionCreateWithoutPagesInput>, Enumerable<revisionUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<revisionCreateOrConnectWithoutPagesInput>
    connect?: Enumerable<revisionWhereUniqueInput>
  }

  export type commentCreateNestedManyWithoutPagesInput = {
    create?: XOR<Enumerable<commentCreateWithoutPagesInput>, Enumerable<commentUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutPagesInput>
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type imageUncheckedCreateNestedManyWithoutPagesInput = {
    create?: XOR<Enumerable<imageCreateWithoutPagesInput>, Enumerable<imageUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<imageCreateOrConnectWithoutPagesInput>
    connect?: Enumerable<imageWhereUniqueInput>
  }

  export type revisionUncheckedCreateNestedManyWithoutPagesInput = {
    create?: XOR<Enumerable<revisionCreateWithoutPagesInput>, Enumerable<revisionUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<revisionCreateOrConnectWithoutPagesInput>
    connect?: Enumerable<revisionWhereUniqueInput>
  }

  export type commentUncheckedCreateNestedManyWithoutPagesInput = {
    create?: XOR<Enumerable<commentCreateWithoutPagesInput>, Enumerable<commentUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutPagesInput>
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type documentUpdateOneRequiredWithoutPagesNestedInput = {
    create?: XOR<documentCreateWithoutPagesInput, documentUncheckedCreateWithoutPagesInput>
    connectOrCreate?: documentCreateOrConnectWithoutPagesInput
    upsert?: documentUpsertWithoutPagesInput
    connect?: documentWhereUniqueInput
    update?: XOR<documentUpdateWithoutPagesInput, documentUncheckedUpdateWithoutPagesInput>
  }

  export type imageUpdateManyWithoutPagesNestedInput = {
    create?: XOR<Enumerable<imageCreateWithoutPagesInput>, Enumerable<imageUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<imageCreateOrConnectWithoutPagesInput>
    upsert?: Enumerable<imageUpsertWithWhereUniqueWithoutPagesInput>
    set?: Enumerable<imageWhereUniqueInput>
    disconnect?: Enumerable<imageWhereUniqueInput>
    delete?: Enumerable<imageWhereUniqueInput>
    connect?: Enumerable<imageWhereUniqueInput>
    update?: Enumerable<imageUpdateWithWhereUniqueWithoutPagesInput>
    updateMany?: Enumerable<imageUpdateManyWithWhereWithoutPagesInput>
    deleteMany?: Enumerable<imageScalarWhereInput>
  }

  export type revisionUpdateManyWithoutPagesNestedInput = {
    create?: XOR<Enumerable<revisionCreateWithoutPagesInput>, Enumerable<revisionUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<revisionCreateOrConnectWithoutPagesInput>
    upsert?: Enumerable<revisionUpsertWithWhereUniqueWithoutPagesInput>
    set?: Enumerable<revisionWhereUniqueInput>
    disconnect?: Enumerable<revisionWhereUniqueInput>
    delete?: Enumerable<revisionWhereUniqueInput>
    connect?: Enumerable<revisionWhereUniqueInput>
    update?: Enumerable<revisionUpdateWithWhereUniqueWithoutPagesInput>
    updateMany?: Enumerable<revisionUpdateManyWithWhereWithoutPagesInput>
    deleteMany?: Enumerable<revisionScalarWhereInput>
  }

  export type commentUpdateManyWithoutPagesNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutPagesInput>, Enumerable<commentUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutPagesInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutPagesInput>
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutPagesInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutPagesInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type imageUncheckedUpdateManyWithoutPagesNestedInput = {
    create?: XOR<Enumerable<imageCreateWithoutPagesInput>, Enumerable<imageUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<imageCreateOrConnectWithoutPagesInput>
    upsert?: Enumerable<imageUpsertWithWhereUniqueWithoutPagesInput>
    set?: Enumerable<imageWhereUniqueInput>
    disconnect?: Enumerable<imageWhereUniqueInput>
    delete?: Enumerable<imageWhereUniqueInput>
    connect?: Enumerable<imageWhereUniqueInput>
    update?: Enumerable<imageUpdateWithWhereUniqueWithoutPagesInput>
    updateMany?: Enumerable<imageUpdateManyWithWhereWithoutPagesInput>
    deleteMany?: Enumerable<imageScalarWhereInput>
  }

  export type revisionUncheckedUpdateManyWithoutPagesNestedInput = {
    create?: XOR<Enumerable<revisionCreateWithoutPagesInput>, Enumerable<revisionUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<revisionCreateOrConnectWithoutPagesInput>
    upsert?: Enumerable<revisionUpsertWithWhereUniqueWithoutPagesInput>
    set?: Enumerable<revisionWhereUniqueInput>
    disconnect?: Enumerable<revisionWhereUniqueInput>
    delete?: Enumerable<revisionWhereUniqueInput>
    connect?: Enumerable<revisionWhereUniqueInput>
    update?: Enumerable<revisionUpdateWithWhereUniqueWithoutPagesInput>
    updateMany?: Enumerable<revisionUpdateManyWithWhereWithoutPagesInput>
    deleteMany?: Enumerable<revisionScalarWhereInput>
  }

  export type commentUncheckedUpdateManyWithoutPagesNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutPagesInput>, Enumerable<commentUncheckedCreateWithoutPagesInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutPagesInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutPagesInput>
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutPagesInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutPagesInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type pagesCreateNestedOneWithoutRevisionInput = {
    create?: XOR<pagesCreateWithoutRevisionInput, pagesUncheckedCreateWithoutRevisionInput>
    connectOrCreate?: pagesCreateOrConnectWithoutRevisionInput
    connect?: pagesWhereUniqueInput
  }

  export type userCreateNestedOneWithoutRevisionInput = {
    create?: XOR<userCreateWithoutRevisionInput, userUncheckedCreateWithoutRevisionInput>
    connectOrCreate?: userCreateOrConnectWithoutRevisionInput
    connect?: userWhereUniqueInput
  }

  export type commentCreateNestedManyWithoutRevisionInput = {
    create?: XOR<Enumerable<commentCreateWithoutRevisionInput>, Enumerable<commentUncheckedCreateWithoutRevisionInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutRevisionInput>
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type imageCreateNestedManyWithoutRevisionInput = {
    create?: XOR<Enumerable<imageCreateWithoutRevisionInput>, Enumerable<imageUncheckedCreateWithoutRevisionInput>>
    connectOrCreate?: Enumerable<imageCreateOrConnectWithoutRevisionInput>
    connect?: Enumerable<imageWhereUniqueInput>
  }

  export type commentUncheckedCreateNestedManyWithoutRevisionInput = {
    create?: XOR<Enumerable<commentCreateWithoutRevisionInput>, Enumerable<commentUncheckedCreateWithoutRevisionInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutRevisionInput>
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type imageUncheckedCreateNestedManyWithoutRevisionInput = {
    create?: XOR<Enumerable<imageCreateWithoutRevisionInput>, Enumerable<imageUncheckedCreateWithoutRevisionInput>>
    connectOrCreate?: Enumerable<imageCreateOrConnectWithoutRevisionInput>
    connect?: Enumerable<imageWhereUniqueInput>
  }

  export type pagesUpdateOneRequiredWithoutRevisionNestedInput = {
    create?: XOR<pagesCreateWithoutRevisionInput, pagesUncheckedCreateWithoutRevisionInput>
    connectOrCreate?: pagesCreateOrConnectWithoutRevisionInput
    upsert?: pagesUpsertWithoutRevisionInput
    connect?: pagesWhereUniqueInput
    update?: XOR<pagesUpdateWithoutRevisionInput, pagesUncheckedUpdateWithoutRevisionInput>
  }

  export type userUpdateOneRequiredWithoutRevisionNestedInput = {
    create?: XOR<userCreateWithoutRevisionInput, userUncheckedCreateWithoutRevisionInput>
    connectOrCreate?: userCreateOrConnectWithoutRevisionInput
    upsert?: userUpsertWithoutRevisionInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutRevisionInput, userUncheckedUpdateWithoutRevisionInput>
  }

  export type commentUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutRevisionInput>, Enumerable<commentUncheckedCreateWithoutRevisionInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutRevisionInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutRevisionInput>
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutRevisionInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutRevisionInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type imageUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<Enumerable<imageCreateWithoutRevisionInput>, Enumerable<imageUncheckedCreateWithoutRevisionInput>>
    connectOrCreate?: Enumerable<imageCreateOrConnectWithoutRevisionInput>
    upsert?: Enumerable<imageUpsertWithWhereUniqueWithoutRevisionInput>
    set?: Enumerable<imageWhereUniqueInput>
    disconnect?: Enumerable<imageWhereUniqueInput>
    delete?: Enumerable<imageWhereUniqueInput>
    connect?: Enumerable<imageWhereUniqueInput>
    update?: Enumerable<imageUpdateWithWhereUniqueWithoutRevisionInput>
    updateMany?: Enumerable<imageUpdateManyWithWhereWithoutRevisionInput>
    deleteMany?: Enumerable<imageScalarWhereInput>
  }

  export type commentUncheckedUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutRevisionInput>, Enumerable<commentUncheckedCreateWithoutRevisionInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutRevisionInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutRevisionInput>
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutRevisionInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutRevisionInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type imageUncheckedUpdateManyWithoutRevisionNestedInput = {
    create?: XOR<Enumerable<imageCreateWithoutRevisionInput>, Enumerable<imageUncheckedCreateWithoutRevisionInput>>
    connectOrCreate?: Enumerable<imageCreateOrConnectWithoutRevisionInput>
    upsert?: Enumerable<imageUpsertWithWhereUniqueWithoutRevisionInput>
    set?: Enumerable<imageWhereUniqueInput>
    disconnect?: Enumerable<imageWhereUniqueInput>
    delete?: Enumerable<imageWhereUniqueInput>
    connect?: Enumerable<imageWhereUniqueInput>
    update?: Enumerable<imageUpdateWithWhereUniqueWithoutRevisionInput>
    updateMany?: Enumerable<imageUpdateManyWithWhereWithoutRevisionInput>
    deleteMany?: Enumerable<imageScalarWhereInput>
  }

  export type userCreateNestedOneWithoutCommentInput = {
    create?: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentInput
    connect?: userWhereUniqueInput
  }

  export type documentCreateNestedOneWithoutCommentInput = {
    create?: XOR<documentCreateWithoutCommentInput, documentUncheckedCreateWithoutCommentInput>
    connectOrCreate?: documentCreateOrConnectWithoutCommentInput
    connect?: documentWhereUniqueInput
  }

  export type pagesCreateNestedOneWithoutCommentInput = {
    create?: XOR<pagesCreateWithoutCommentInput, pagesUncheckedCreateWithoutCommentInput>
    connectOrCreate?: pagesCreateOrConnectWithoutCommentInput
    connect?: pagesWhereUniqueInput
  }

  export type revisionCreateNestedOneWithoutCommentInput = {
    create?: XOR<revisionCreateWithoutCommentInput, revisionUncheckedCreateWithoutCommentInput>
    connectOrCreate?: revisionCreateOrConnectWithoutCommentInput
    connect?: revisionWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
    connectOrCreate?: userCreateOrConnectWithoutCommentInput
    upsert?: userUpsertWithoutCommentInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutCommentInput, userUncheckedUpdateWithoutCommentInput>
  }

  export type documentUpdateOneWithoutCommentNestedInput = {
    create?: XOR<documentCreateWithoutCommentInput, documentUncheckedCreateWithoutCommentInput>
    connectOrCreate?: documentCreateOrConnectWithoutCommentInput
    upsert?: documentUpsertWithoutCommentInput
    disconnect?: boolean
    delete?: boolean
    connect?: documentWhereUniqueInput
    update?: XOR<documentUpdateWithoutCommentInput, documentUncheckedUpdateWithoutCommentInput>
  }

  export type pagesUpdateOneWithoutCommentNestedInput = {
    create?: XOR<pagesCreateWithoutCommentInput, pagesUncheckedCreateWithoutCommentInput>
    connectOrCreate?: pagesCreateOrConnectWithoutCommentInput
    upsert?: pagesUpsertWithoutCommentInput
    disconnect?: boolean
    delete?: boolean
    connect?: pagesWhereUniqueInput
    update?: XOR<pagesUpdateWithoutCommentInput, pagesUncheckedUpdateWithoutCommentInput>
  }

  export type revisionUpdateOneWithoutCommentNestedInput = {
    create?: XOR<revisionCreateWithoutCommentInput, revisionUncheckedCreateWithoutCommentInput>
    connectOrCreate?: revisionCreateOrConnectWithoutCommentInput
    upsert?: revisionUpsertWithoutCommentInput
    disconnect?: boolean
    delete?: boolean
    connect?: revisionWhereUniqueInput
    update?: XOR<revisionUpdateWithoutCommentInput, revisionUncheckedUpdateWithoutCommentInput>
  }

  export type pagesCreateNestedOneWithoutImageInput = {
    create?: XOR<pagesCreateWithoutImageInput, pagesUncheckedCreateWithoutImageInput>
    connectOrCreate?: pagesCreateOrConnectWithoutImageInput
    connect?: pagesWhereUniqueInput
  }

  export type revisionCreateNestedOneWithoutImageInput = {
    create?: XOR<revisionCreateWithoutImageInput, revisionUncheckedCreateWithoutImageInput>
    connectOrCreate?: revisionCreateOrConnectWithoutImageInput
    connect?: revisionWhereUniqueInput
  }

  export type pagesUpdateOneWithoutImageNestedInput = {
    create?: XOR<pagesCreateWithoutImageInput, pagesUncheckedCreateWithoutImageInput>
    connectOrCreate?: pagesCreateOrConnectWithoutImageInput
    upsert?: pagesUpsertWithoutImageInput
    disconnect?: boolean
    delete?: boolean
    connect?: pagesWhereUniqueInput
    update?: XOR<pagesUpdateWithoutImageInput, pagesUncheckedUpdateWithoutImageInput>
  }

  export type revisionUpdateOneWithoutImageNestedInput = {
    create?: XOR<revisionCreateWithoutImageInput, revisionUncheckedCreateWithoutImageInput>
    connectOrCreate?: revisionCreateOrConnectWithoutImageInput
    upsert?: revisionUpsertWithoutImageInput
    disconnect?: boolean
    delete?: boolean
    connect?: revisionWhereUniqueInput
    update?: XOR<revisionUpdateWithoutImageInput, revisionUncheckedUpdateWithoutImageInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type documentCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    active: boolean
    pages?: pagesCreateNestedManyWithoutDocumentInput
    comment?: commentCreateNestedManyWithoutDocumentInput
  }

  export type documentUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    active: boolean
    pages?: pagesUncheckedCreateNestedManyWithoutDocumentInput
    comment?: commentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type documentCreateOrConnectWithoutUserInput = {
    where: documentWhereUniqueInput
    create: XOR<documentCreateWithoutUserInput, documentUncheckedCreateWithoutUserInput>
  }

  export type commentCreateWithoutUserInput = {
    id?: string
    text: string
    document?: documentCreateNestedOneWithoutCommentInput
    pages?: pagesCreateNestedOneWithoutCommentInput
    revision?: revisionCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutUserInput = {
    id?: string
    text: string
    documentId?: string | null
    pageId?: string | null
    revisionId?: string | null
  }

  export type commentCreateOrConnectWithoutUserInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput>
  }

  export type revisionCreateWithoutUserInput = {
    id?: string
    title?: string | null
    content: string
    published: boolean
    pages: pagesCreateNestedOneWithoutRevisionInput
    comment?: commentCreateNestedManyWithoutRevisionInput
    image?: imageCreateNestedManyWithoutRevisionInput
  }

  export type revisionUncheckedCreateWithoutUserInput = {
    id?: string
    pageId: string
    title?: string | null
    content: string
    published: boolean
    comment?: commentUncheckedCreateNestedManyWithoutRevisionInput
    image?: imageUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type revisionCreateOrConnectWithoutUserInput = {
    where: revisionWhereUniqueInput
    create: XOR<revisionCreateWithoutUserInput, revisionUncheckedCreateWithoutUserInput>
  }

  export type documentUpsertWithWhereUniqueWithoutUserInput = {
    where: documentWhereUniqueInput
    update: XOR<documentUpdateWithoutUserInput, documentUncheckedUpdateWithoutUserInput>
    create: XOR<documentCreateWithoutUserInput, documentUncheckedCreateWithoutUserInput>
  }

  export type documentUpdateWithWhereUniqueWithoutUserInput = {
    where: documentWhereUniqueInput
    data: XOR<documentUpdateWithoutUserInput, documentUncheckedUpdateWithoutUserInput>
  }

  export type documentUpdateManyWithWhereWithoutUserInput = {
    where: documentScalarWhereInput
    data: XOR<documentUpdateManyMutationInput, documentUncheckedUpdateManyWithoutDocumentInput>
  }

  export type documentScalarWhereInput = {
    AND?: Enumerable<documentScalarWhereInput>
    OR?: Enumerable<documentScalarWhereInput>
    NOT?: Enumerable<documentScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    userId?: StringFilter | string
    active?: BoolFilter | boolean
  }

  export type commentUpsertWithWhereUniqueWithoutUserInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutUserInput, commentUncheckedUpdateWithoutUserInput>
    create: XOR<commentCreateWithoutUserInput, commentUncheckedCreateWithoutUserInput>
  }

  export type commentUpdateWithWhereUniqueWithoutUserInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutUserInput, commentUncheckedUpdateWithoutUserInput>
  }

  export type commentUpdateManyWithWhereWithoutUserInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutCommentInput>
  }

  export type commentScalarWhereInput = {
    AND?: Enumerable<commentScalarWhereInput>
    OR?: Enumerable<commentScalarWhereInput>
    NOT?: Enumerable<commentScalarWhereInput>
    id?: StringFilter | string
    text?: StringFilter | string
    userId?: StringFilter | string
    documentId?: StringNullableFilter | string | null
    pageId?: StringNullableFilter | string | null
    revisionId?: StringNullableFilter | string | null
  }

  export type revisionUpsertWithWhereUniqueWithoutUserInput = {
    where: revisionWhereUniqueInput
    update: XOR<revisionUpdateWithoutUserInput, revisionUncheckedUpdateWithoutUserInput>
    create: XOR<revisionCreateWithoutUserInput, revisionUncheckedCreateWithoutUserInput>
  }

  export type revisionUpdateWithWhereUniqueWithoutUserInput = {
    where: revisionWhereUniqueInput
    data: XOR<revisionUpdateWithoutUserInput, revisionUncheckedUpdateWithoutUserInput>
  }

  export type revisionUpdateManyWithWhereWithoutUserInput = {
    where: revisionScalarWhereInput
    data: XOR<revisionUpdateManyMutationInput, revisionUncheckedUpdateManyWithoutRevisionInput>
  }

  export type revisionScalarWhereInput = {
    AND?: Enumerable<revisionScalarWhereInput>
    OR?: Enumerable<revisionScalarWhereInput>
    NOT?: Enumerable<revisionScalarWhereInput>
    id?: StringFilter | string
    pageId?: StringFilter | string
    title?: StringNullableFilter | string | null
    content?: StringFilter | string
    userId?: StringFilter | string
    published?: BoolFilter | boolean
  }

  export type userCreateWithoutDocumentInput = {
    id?: string
    name: string
    email: string
    dateOfBirth: string
    gender: string
    comment?: commentCreateNestedManyWithoutUserInput
    revision?: revisionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutDocumentInput = {
    id?: string
    name: string
    email: string
    dateOfBirth: string
    gender: string
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
    revision?: revisionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutDocumentInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutDocumentInput, userUncheckedCreateWithoutDocumentInput>
  }

  export type pagesCreateWithoutDocumentInput = {
    id?: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    image?: imageCreateNestedManyWithoutPagesInput
    revision?: revisionCreateNestedManyWithoutPagesInput
    comment?: commentCreateNestedManyWithoutPagesInput
  }

  export type pagesUncheckedCreateWithoutDocumentInput = {
    id?: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    image?: imageUncheckedCreateNestedManyWithoutPagesInput
    revision?: revisionUncheckedCreateNestedManyWithoutPagesInput
    comment?: commentUncheckedCreateNestedManyWithoutPagesInput
  }

  export type pagesCreateOrConnectWithoutDocumentInput = {
    where: pagesWhereUniqueInput
    create: XOR<pagesCreateWithoutDocumentInput, pagesUncheckedCreateWithoutDocumentInput>
  }

  export type commentCreateWithoutDocumentInput = {
    id?: string
    text: string
    user: userCreateNestedOneWithoutCommentInput
    pages?: pagesCreateNestedOneWithoutCommentInput
    revision?: revisionCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutDocumentInput = {
    id?: string
    text: string
    userId: string
    pageId?: string | null
    revisionId?: string | null
  }

  export type commentCreateOrConnectWithoutDocumentInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutDocumentInput, commentUncheckedCreateWithoutDocumentInput>
  }

  export type userUpsertWithoutDocumentInput = {
    update: XOR<userUpdateWithoutDocumentInput, userUncheckedUpdateWithoutDocumentInput>
    create: XOR<userCreateWithoutDocumentInput, userUncheckedCreateWithoutDocumentInput>
  }

  export type userUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    comment?: commentUpdateManyWithoutUserNestedInput
    revision?: revisionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
    revision?: revisionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type pagesUpsertWithWhereUniqueWithoutDocumentInput = {
    where: pagesWhereUniqueInput
    update: XOR<pagesUpdateWithoutDocumentInput, pagesUncheckedUpdateWithoutDocumentInput>
    create: XOR<pagesCreateWithoutDocumentInput, pagesUncheckedCreateWithoutDocumentInput>
  }

  export type pagesUpdateWithWhereUniqueWithoutDocumentInput = {
    where: pagesWhereUniqueInput
    data: XOR<pagesUpdateWithoutDocumentInput, pagesUncheckedUpdateWithoutDocumentInput>
  }

  export type pagesUpdateManyWithWhereWithoutDocumentInput = {
    where: pagesScalarWhereInput
    data: XOR<pagesUpdateManyMutationInput, pagesUncheckedUpdateManyWithoutPagesInput>
  }

  export type pagesScalarWhereInput = {
    AND?: Enumerable<pagesScalarWhereInput>
    OR?: Enumerable<pagesScalarWhereInput>
    NOT?: Enumerable<pagesScalarWhereInput>
    id?: StringFilter | string
    documentId?: StringFilter | string
    pageNumber?: IntFilter | number
    title?: StringNullableFilter | string | null
    content?: StringFilter | string
    active?: BoolFilter | boolean
  }

  export type commentUpsertWithWhereUniqueWithoutDocumentInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutDocumentInput, commentUncheckedUpdateWithoutDocumentInput>
    create: XOR<commentCreateWithoutDocumentInput, commentUncheckedCreateWithoutDocumentInput>
  }

  export type commentUpdateWithWhereUniqueWithoutDocumentInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutDocumentInput, commentUncheckedUpdateWithoutDocumentInput>
  }

  export type commentUpdateManyWithWhereWithoutDocumentInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutCommentInput>
  }

  export type documentCreateWithoutPagesInput = {
    id?: string
    name: string
    description?: string | null
    active: boolean
    user: userCreateNestedOneWithoutDocumentInput
    comment?: commentCreateNestedManyWithoutDocumentInput
  }

  export type documentUncheckedCreateWithoutPagesInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    active: boolean
    comment?: commentUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type documentCreateOrConnectWithoutPagesInput = {
    where: documentWhereUniqueInput
    create: XOR<documentCreateWithoutPagesInput, documentUncheckedCreateWithoutPagesInput>
  }

  export type imageCreateWithoutPagesInput = {
    id?: string
    type?: string | null
    size?: string | null
    image: string
    dimension: string
    revision?: revisionCreateNestedOneWithoutImageInput
  }

  export type imageUncheckedCreateWithoutPagesInput = {
    id?: string
    revisionId?: string | null
    type?: string | null
    size?: string | null
    image: string
    dimension: string
  }

  export type imageCreateOrConnectWithoutPagesInput = {
    where: imageWhereUniqueInput
    create: XOR<imageCreateWithoutPagesInput, imageUncheckedCreateWithoutPagesInput>
  }

  export type revisionCreateWithoutPagesInput = {
    id?: string
    title?: string | null
    content: string
    published: boolean
    user: userCreateNestedOneWithoutRevisionInput
    comment?: commentCreateNestedManyWithoutRevisionInput
    image?: imageCreateNestedManyWithoutRevisionInput
  }

  export type revisionUncheckedCreateWithoutPagesInput = {
    id?: string
    title?: string | null
    content: string
    userId: string
    published: boolean
    comment?: commentUncheckedCreateNestedManyWithoutRevisionInput
    image?: imageUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type revisionCreateOrConnectWithoutPagesInput = {
    where: revisionWhereUniqueInput
    create: XOR<revisionCreateWithoutPagesInput, revisionUncheckedCreateWithoutPagesInput>
  }

  export type commentCreateWithoutPagesInput = {
    id?: string
    text: string
    user: userCreateNestedOneWithoutCommentInput
    document?: documentCreateNestedOneWithoutCommentInput
    revision?: revisionCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutPagesInput = {
    id?: string
    text: string
    userId: string
    documentId?: string | null
    revisionId?: string | null
  }

  export type commentCreateOrConnectWithoutPagesInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutPagesInput, commentUncheckedCreateWithoutPagesInput>
  }

  export type documentUpsertWithoutPagesInput = {
    update: XOR<documentUpdateWithoutPagesInput, documentUncheckedUpdateWithoutPagesInput>
    create: XOR<documentCreateWithoutPagesInput, documentUncheckedCreateWithoutPagesInput>
  }

  export type documentUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutDocumentNestedInput
    comment?: commentUpdateManyWithoutDocumentNestedInput
  }

  export type documentUncheckedUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    comment?: commentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type imageUpsertWithWhereUniqueWithoutPagesInput = {
    where: imageWhereUniqueInput
    update: XOR<imageUpdateWithoutPagesInput, imageUncheckedUpdateWithoutPagesInput>
    create: XOR<imageCreateWithoutPagesInput, imageUncheckedCreateWithoutPagesInput>
  }

  export type imageUpdateWithWhereUniqueWithoutPagesInput = {
    where: imageWhereUniqueInput
    data: XOR<imageUpdateWithoutPagesInput, imageUncheckedUpdateWithoutPagesInput>
  }

  export type imageUpdateManyWithWhereWithoutPagesInput = {
    where: imageScalarWhereInput
    data: XOR<imageUpdateManyMutationInput, imageUncheckedUpdateManyWithoutImageInput>
  }

  export type imageScalarWhereInput = {
    AND?: Enumerable<imageScalarWhereInput>
    OR?: Enumerable<imageScalarWhereInput>
    NOT?: Enumerable<imageScalarWhereInput>
    id?: StringFilter | string
    pageId?: StringNullableFilter | string | null
    revisionId?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    size?: StringNullableFilter | string | null
    image?: StringFilter | string
    dimension?: StringFilter | string
  }

  export type revisionUpsertWithWhereUniqueWithoutPagesInput = {
    where: revisionWhereUniqueInput
    update: XOR<revisionUpdateWithoutPagesInput, revisionUncheckedUpdateWithoutPagesInput>
    create: XOR<revisionCreateWithoutPagesInput, revisionUncheckedCreateWithoutPagesInput>
  }

  export type revisionUpdateWithWhereUniqueWithoutPagesInput = {
    where: revisionWhereUniqueInput
    data: XOR<revisionUpdateWithoutPagesInput, revisionUncheckedUpdateWithoutPagesInput>
  }

  export type revisionUpdateManyWithWhereWithoutPagesInput = {
    where: revisionScalarWhereInput
    data: XOR<revisionUpdateManyMutationInput, revisionUncheckedUpdateManyWithoutRevisionInput>
  }

  export type commentUpsertWithWhereUniqueWithoutPagesInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutPagesInput, commentUncheckedUpdateWithoutPagesInput>
    create: XOR<commentCreateWithoutPagesInput, commentUncheckedCreateWithoutPagesInput>
  }

  export type commentUpdateWithWhereUniqueWithoutPagesInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutPagesInput, commentUncheckedUpdateWithoutPagesInput>
  }

  export type commentUpdateManyWithWhereWithoutPagesInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutCommentInput>
  }

  export type pagesCreateWithoutRevisionInput = {
    id?: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    document: documentCreateNestedOneWithoutPagesInput
    image?: imageCreateNestedManyWithoutPagesInput
    comment?: commentCreateNestedManyWithoutPagesInput
  }

  export type pagesUncheckedCreateWithoutRevisionInput = {
    id?: string
    documentId: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    image?: imageUncheckedCreateNestedManyWithoutPagesInput
    comment?: commentUncheckedCreateNestedManyWithoutPagesInput
  }

  export type pagesCreateOrConnectWithoutRevisionInput = {
    where: pagesWhereUniqueInput
    create: XOR<pagesCreateWithoutRevisionInput, pagesUncheckedCreateWithoutRevisionInput>
  }

  export type userCreateWithoutRevisionInput = {
    id?: string
    name: string
    email: string
    dateOfBirth: string
    gender: string
    document?: documentCreateNestedManyWithoutUserInput
    comment?: commentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutRevisionInput = {
    id?: string
    name: string
    email: string
    dateOfBirth: string
    gender: string
    document?: documentUncheckedCreateNestedManyWithoutUserInput
    comment?: commentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutRevisionInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutRevisionInput, userUncheckedCreateWithoutRevisionInput>
  }

  export type commentCreateWithoutRevisionInput = {
    id?: string
    text: string
    user: userCreateNestedOneWithoutCommentInput
    document?: documentCreateNestedOneWithoutCommentInput
    pages?: pagesCreateNestedOneWithoutCommentInput
  }

  export type commentUncheckedCreateWithoutRevisionInput = {
    id?: string
    text: string
    userId: string
    documentId?: string | null
    pageId?: string | null
  }

  export type commentCreateOrConnectWithoutRevisionInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutRevisionInput, commentUncheckedCreateWithoutRevisionInput>
  }

  export type imageCreateWithoutRevisionInput = {
    id?: string
    type?: string | null
    size?: string | null
    image: string
    dimension: string
    pages?: pagesCreateNestedOneWithoutImageInput
  }

  export type imageUncheckedCreateWithoutRevisionInput = {
    id?: string
    pageId?: string | null
    type?: string | null
    size?: string | null
    image: string
    dimension: string
  }

  export type imageCreateOrConnectWithoutRevisionInput = {
    where: imageWhereUniqueInput
    create: XOR<imageCreateWithoutRevisionInput, imageUncheckedCreateWithoutRevisionInput>
  }

  export type pagesUpsertWithoutRevisionInput = {
    update: XOR<pagesUpdateWithoutRevisionInput, pagesUncheckedUpdateWithoutRevisionInput>
    create: XOR<pagesCreateWithoutRevisionInput, pagesUncheckedCreateWithoutRevisionInput>
  }

  export type pagesUpdateWithoutRevisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    document?: documentUpdateOneRequiredWithoutPagesNestedInput
    image?: imageUpdateManyWithoutPagesNestedInput
    comment?: commentUpdateManyWithoutPagesNestedInput
  }

  export type pagesUncheckedUpdateWithoutRevisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    image?: imageUncheckedUpdateManyWithoutPagesNestedInput
    comment?: commentUncheckedUpdateManyWithoutPagesNestedInput
  }

  export type userUpsertWithoutRevisionInput = {
    update: XOR<userUpdateWithoutRevisionInput, userUncheckedUpdateWithoutRevisionInput>
    create: XOR<userCreateWithoutRevisionInput, userUncheckedCreateWithoutRevisionInput>
  }

  export type userUpdateWithoutRevisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    document?: documentUpdateManyWithoutUserNestedInput
    comment?: commentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutRevisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    document?: documentUncheckedUpdateManyWithoutUserNestedInput
    comment?: commentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type commentUpsertWithWhereUniqueWithoutRevisionInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutRevisionInput, commentUncheckedUpdateWithoutRevisionInput>
    create: XOR<commentCreateWithoutRevisionInput, commentUncheckedCreateWithoutRevisionInput>
  }

  export type commentUpdateWithWhereUniqueWithoutRevisionInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutRevisionInput, commentUncheckedUpdateWithoutRevisionInput>
  }

  export type commentUpdateManyWithWhereWithoutRevisionInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutCommentInput>
  }

  export type imageUpsertWithWhereUniqueWithoutRevisionInput = {
    where: imageWhereUniqueInput
    update: XOR<imageUpdateWithoutRevisionInput, imageUncheckedUpdateWithoutRevisionInput>
    create: XOR<imageCreateWithoutRevisionInput, imageUncheckedCreateWithoutRevisionInput>
  }

  export type imageUpdateWithWhereUniqueWithoutRevisionInput = {
    where: imageWhereUniqueInput
    data: XOR<imageUpdateWithoutRevisionInput, imageUncheckedUpdateWithoutRevisionInput>
  }

  export type imageUpdateManyWithWhereWithoutRevisionInput = {
    where: imageScalarWhereInput
    data: XOR<imageUpdateManyMutationInput, imageUncheckedUpdateManyWithoutImageInput>
  }

  export type userCreateWithoutCommentInput = {
    id?: string
    name: string
    email: string
    dateOfBirth: string
    gender: string
    document?: documentCreateNestedManyWithoutUserInput
    revision?: revisionCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCommentInput = {
    id?: string
    name: string
    email: string
    dateOfBirth: string
    gender: string
    document?: documentUncheckedCreateNestedManyWithoutUserInput
    revision?: revisionUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCommentInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
  }

  export type documentCreateWithoutCommentInput = {
    id?: string
    name: string
    description?: string | null
    active: boolean
    user: userCreateNestedOneWithoutDocumentInput
    pages?: pagesCreateNestedManyWithoutDocumentInput
  }

  export type documentUncheckedCreateWithoutCommentInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    active: boolean
    pages?: pagesUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type documentCreateOrConnectWithoutCommentInput = {
    where: documentWhereUniqueInput
    create: XOR<documentCreateWithoutCommentInput, documentUncheckedCreateWithoutCommentInput>
  }

  export type pagesCreateWithoutCommentInput = {
    id?: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    document: documentCreateNestedOneWithoutPagesInput
    image?: imageCreateNestedManyWithoutPagesInput
    revision?: revisionCreateNestedManyWithoutPagesInput
  }

  export type pagesUncheckedCreateWithoutCommentInput = {
    id?: string
    documentId: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    image?: imageUncheckedCreateNestedManyWithoutPagesInput
    revision?: revisionUncheckedCreateNestedManyWithoutPagesInput
  }

  export type pagesCreateOrConnectWithoutCommentInput = {
    where: pagesWhereUniqueInput
    create: XOR<pagesCreateWithoutCommentInput, pagesUncheckedCreateWithoutCommentInput>
  }

  export type revisionCreateWithoutCommentInput = {
    id?: string
    title?: string | null
    content: string
    published: boolean
    pages: pagesCreateNestedOneWithoutRevisionInput
    user: userCreateNestedOneWithoutRevisionInput
    image?: imageCreateNestedManyWithoutRevisionInput
  }

  export type revisionUncheckedCreateWithoutCommentInput = {
    id?: string
    pageId: string
    title?: string | null
    content: string
    userId: string
    published: boolean
    image?: imageUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type revisionCreateOrConnectWithoutCommentInput = {
    where: revisionWhereUniqueInput
    create: XOR<revisionCreateWithoutCommentInput, revisionUncheckedCreateWithoutCommentInput>
  }

  export type userUpsertWithoutCommentInput = {
    update: XOR<userUpdateWithoutCommentInput, userUncheckedUpdateWithoutCommentInput>
    create: XOR<userCreateWithoutCommentInput, userUncheckedCreateWithoutCommentInput>
  }

  export type userUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    document?: documentUpdateManyWithoutUserNestedInput
    revision?: revisionUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    document?: documentUncheckedUpdateManyWithoutUserNestedInput
    revision?: revisionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type documentUpsertWithoutCommentInput = {
    update: XOR<documentUpdateWithoutCommentInput, documentUncheckedUpdateWithoutCommentInput>
    create: XOR<documentCreateWithoutCommentInput, documentUncheckedCreateWithoutCommentInput>
  }

  export type documentUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutDocumentNestedInput
    pages?: pagesUpdateManyWithoutDocumentNestedInput
  }

  export type documentUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type pagesUpsertWithoutCommentInput = {
    update: XOR<pagesUpdateWithoutCommentInput, pagesUncheckedUpdateWithoutCommentInput>
    create: XOR<pagesCreateWithoutCommentInput, pagesUncheckedCreateWithoutCommentInput>
  }

  export type pagesUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    document?: documentUpdateOneRequiredWithoutPagesNestedInput
    image?: imageUpdateManyWithoutPagesNestedInput
    revision?: revisionUpdateManyWithoutPagesNestedInput
  }

  export type pagesUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    image?: imageUncheckedUpdateManyWithoutPagesNestedInput
    revision?: revisionUncheckedUpdateManyWithoutPagesNestedInput
  }

  export type revisionUpsertWithoutCommentInput = {
    update: XOR<revisionUpdateWithoutCommentInput, revisionUncheckedUpdateWithoutCommentInput>
    create: XOR<revisionCreateWithoutCommentInput, revisionUncheckedCreateWithoutCommentInput>
  }

  export type revisionUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUpdateOneRequiredWithoutRevisionNestedInput
    user?: userUpdateOneRequiredWithoutRevisionNestedInput
    image?: imageUpdateManyWithoutRevisionNestedInput
  }

  export type revisionUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    image?: imageUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type pagesCreateWithoutImageInput = {
    id?: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    document: documentCreateNestedOneWithoutPagesInput
    revision?: revisionCreateNestedManyWithoutPagesInput
    comment?: commentCreateNestedManyWithoutPagesInput
  }

  export type pagesUncheckedCreateWithoutImageInput = {
    id?: string
    documentId: string
    pageNumber: number
    title?: string | null
    content: string
    active: boolean
    revision?: revisionUncheckedCreateNestedManyWithoutPagesInput
    comment?: commentUncheckedCreateNestedManyWithoutPagesInput
  }

  export type pagesCreateOrConnectWithoutImageInput = {
    where: pagesWhereUniqueInput
    create: XOR<pagesCreateWithoutImageInput, pagesUncheckedCreateWithoutImageInput>
  }

  export type revisionCreateWithoutImageInput = {
    id?: string
    title?: string | null
    content: string
    published: boolean
    pages: pagesCreateNestedOneWithoutRevisionInput
    user: userCreateNestedOneWithoutRevisionInput
    comment?: commentCreateNestedManyWithoutRevisionInput
  }

  export type revisionUncheckedCreateWithoutImageInput = {
    id?: string
    pageId: string
    title?: string | null
    content: string
    userId: string
    published: boolean
    comment?: commentUncheckedCreateNestedManyWithoutRevisionInput
  }

  export type revisionCreateOrConnectWithoutImageInput = {
    where: revisionWhereUniqueInput
    create: XOR<revisionCreateWithoutImageInput, revisionUncheckedCreateWithoutImageInput>
  }

  export type pagesUpsertWithoutImageInput = {
    update: XOR<pagesUpdateWithoutImageInput, pagesUncheckedUpdateWithoutImageInput>
    create: XOR<pagesCreateWithoutImageInput, pagesUncheckedCreateWithoutImageInput>
  }

  export type pagesUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    document?: documentUpdateOneRequiredWithoutPagesNestedInput
    revision?: revisionUpdateManyWithoutPagesNestedInput
    comment?: commentUpdateManyWithoutPagesNestedInput
  }

  export type pagesUncheckedUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    revision?: revisionUncheckedUpdateManyWithoutPagesNestedInput
    comment?: commentUncheckedUpdateManyWithoutPagesNestedInput
  }

  export type revisionUpsertWithoutImageInput = {
    update: XOR<revisionUpdateWithoutImageInput, revisionUncheckedUpdateWithoutImageInput>
    create: XOR<revisionCreateWithoutImageInput, revisionUncheckedCreateWithoutImageInput>
  }

  export type revisionUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUpdateOneRequiredWithoutRevisionNestedInput
    user?: userUpdateOneRequiredWithoutRevisionNestedInput
    comment?: commentUpdateManyWithoutRevisionNestedInput
  }

  export type revisionUncheckedUpdateWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    comment?: commentUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type documentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUpdateManyWithoutDocumentNestedInput
    comment?: commentUpdateManyWithoutDocumentNestedInput
  }

  export type documentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUncheckedUpdateManyWithoutDocumentNestedInput
    comment?: commentUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type documentUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type commentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    document?: documentUpdateOneWithoutCommentNestedInput
    pages?: pagesUpdateOneWithoutCommentNestedInput
    revision?: revisionUpdateOneWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentUncheckedUpdateManyWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type revisionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    pages?: pagesUpdateOneRequiredWithoutRevisionNestedInput
    comment?: commentUpdateManyWithoutRevisionNestedInput
    image?: imageUpdateManyWithoutRevisionNestedInput
  }

  export type revisionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    comment?: commentUncheckedUpdateManyWithoutRevisionNestedInput
    image?: imageUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type revisionUncheckedUpdateManyWithoutRevisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type pagesUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    image?: imageUpdateManyWithoutPagesNestedInput
    revision?: revisionUpdateManyWithoutPagesNestedInput
    comment?: commentUpdateManyWithoutPagesNestedInput
  }

  export type pagesUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    image?: imageUncheckedUpdateManyWithoutPagesNestedInput
    revision?: revisionUncheckedUpdateManyWithoutPagesNestedInput
    comment?: commentUncheckedUpdateManyWithoutPagesNestedInput
  }

  export type pagesUncheckedUpdateManyWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageNumber?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type commentUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutCommentNestedInput
    pages?: pagesUpdateOneWithoutCommentNestedInput
    revision?: revisionUpdateOneWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type imageUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    dimension?: StringFieldUpdateOperationsInput | string
    revision?: revisionUpdateOneWithoutImageNestedInput
  }

  export type imageUncheckedUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    dimension?: StringFieldUpdateOperationsInput | string
  }

  export type imageUncheckedUpdateManyWithoutImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    dimension?: StringFieldUpdateOperationsInput | string
  }

  export type revisionUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    user?: userUpdateOneRequiredWithoutRevisionNestedInput
    comment?: commentUpdateManyWithoutRevisionNestedInput
    image?: imageUpdateManyWithoutRevisionNestedInput
  }

  export type revisionUncheckedUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    published?: BoolFieldUpdateOperationsInput | boolean
    comment?: commentUncheckedUpdateManyWithoutRevisionNestedInput
    image?: imageUncheckedUpdateManyWithoutRevisionNestedInput
  }

  export type commentUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutCommentNestedInput
    document?: documentUpdateOneWithoutCommentNestedInput
    revision?: revisionUpdateOneWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutPagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    revisionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentUpdateWithoutRevisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutCommentNestedInput
    document?: documentUpdateOneWithoutCommentNestedInput
    pages?: pagesUpdateOneWithoutCommentNestedInput
  }

  export type commentUncheckedUpdateWithoutRevisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    documentId?: NullableStringFieldUpdateOperationsInput | string | null
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type imageUpdateWithoutRevisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    dimension?: StringFieldUpdateOperationsInput | string
    pages?: pagesUpdateOneWithoutImageNestedInput
  }

  export type imageUncheckedUpdateWithoutRevisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableStringFieldUpdateOperationsInput | string | null
    image?: StringFieldUpdateOperationsInput | string
    dimension?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}